'use client'

import { useState, useEffect, useRef } from 'react'
import { Edit, Calendar, DollarSign, CreditCard, Info, Flag, Mail, Phone, Plus, X, Download, Check, Building, User, ArrowLeft } from 'lucide-react'
import TopNavigation from '../../../components/TopNavigation'
import ReservationModal from '../../../components/ReservationModal'
import RatingStars from '../../../components/RatingStars'
import { propertyService, userService, type Property } from '../../../lib/api'

interface AmenitiesEditModalProps {
  amenities: string[]
  selectedAmenities: string[]
  onSave: (amenities: string[]) => void
  onCancel: () => void
}

function AmenitiesEditModal({ amenities, selectedAmenities, onSave, onCancel }: AmenitiesEditModalProps) {
  const [selected, setSelected] = useState<string[]>(selectedAmenities)
  const [searchTerm, setSearchTerm] = useState('')

  const handleToggleAmenity = (amenity: string) => {
    if (selected.includes(amenity)) {
      setSelected(selected.filter(item => item !== amenity))
    } else {
      setSelected([...selected, amenity])
    }
  }

  const filteredAmenities = amenities.filter(amenity =>
    amenity.toLowerCase().includes(searchTerm.toLowerCase())
  )

  return (
    <div>
      <div className="mb-4">
        <p className="text-sm text-gray-600 mb-3">Select amenities for this property:</p>
        
        {/* Search input */}
        <div className="mb-3">
          <input
            type="text"
            placeholder="Search amenities..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div className="space-y-2 max-h-60 overflow-y-auto">
          {filteredAmenities.map((amenity, index) => (
            <label key={index} className="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded-lg cursor-pointer">
              <input
                type="checkbox"
                checked={selected.includes(amenity)}
                onChange={() => handleToggleAmenity(amenity)}
                className="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500"
              />
              <span className="text-sm text-gray-700">{amenity}</span>
              {selected.includes(amenity) && (
                <Check size={16} className="text-orange-500 ml-auto" />
              )}
            </label>
          ))}
        </div>
      </div>
      
      <div className="flex justify-end space-x-3">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
        >
          Cancel
        </button>
        <button
          onClick={() => onSave(selected)}
          className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
        >
          Save
        </button>
      </div>
    </div>
  )
}

interface RulesEditModalProps {
  rules: string[]
  selectedRules: string[]
  onSave: (rules: string[]) => void
  onCancel: () => void
}

interface OwnerEditModalProps {
  owner: {
    name: string
    flag: string
    country: string
    email: string
    phone: string
    status: string
  }
  countries: Array<{ code: string; name: string; flag: string }>
  onSave: (owner: any) => void
  onCancel: () => void
}

interface AddExpenseModalProps {
  onSave: (expense: any) => void
  onCancel: () => void
}

interface AddUtilityModalProps {
  onSave: (utility: { title: string; description: string }) => void
  onCancel: () => void
}

function RulesEditModal({ rules, selectedRules, onSave, onCancel }: RulesEditModalProps) {
  const [selected, setSelected] = useState<string[]>(selectedRules)
  const [searchTerm, setSearchTerm] = useState('')

  const handleToggleRule = (rule: string) => {
    if (selected.includes(rule)) {
      setSelected(selected.filter(item => item !== rule))
    } else {
      setSelected([...selected, rule])
    }
  }

  const filteredRules = rules.filter(rule =>
    rule.toLowerCase().includes(searchTerm.toLowerCase())
  )

  return (
    <div>
      <div className="mb-4">
        <p className="text-sm text-gray-600 mb-3">Select rules for this property:</p>
        
        {/* Search input */}
        <div className="mb-3">
          <input
            type="text"
            placeholder="Search rules..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div className="space-y-2 max-h-60 overflow-y-auto">
          {filteredRules.map((rule, index) => (
            <label key={index} className="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded-lg cursor-pointer">
              <input
                type="checkbox"
                checked={selected.includes(rule)}
                onChange={() => handleToggleRule(rule)}
                className="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500"
              />
              <span className="text-sm text-gray-700">{rule}</span>
              {selected.includes(rule) && (
                <Check size={16} className="text-orange-500 ml-auto" />
              )}
            </label>
          ))}
        </div>
      </div>
      
      <div className="flex justify-end space-x-3">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
        >
          Cancel
        </button>
        <button
          onClick={() => onSave(selected)}
          className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
        >
          Save
        </button>
      </div>
    </div>
  )
}

function OwnerEditModal({ owner, countries, onSave, onCancel }: OwnerEditModalProps) {
  const [formData, setFormData] = useState(owner)

  const handleChange = (field: string, value: string) => {
    if (field === 'country') {
      // Find the selected country and update both country and flag
      const selectedCountry = countries.find(c => c.name === value)
      setFormData(prev => ({ 
        ...prev, 
        [field]: value,
        flag: selectedCountry ? selectedCountry.flag : prev.flag
      }))
    } else {
    setFormData({ ...formData, [field]: value })
    }
  }

  return (
    <div>
      <div className="mb-4 space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Name</label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => handleChange('name', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Country</label>
          <div className="relative">
            <select
            value={formData.country}
            onChange={(e) => handleChange('country', e.target.value)}
              className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white cursor-pointer"
            >
              {countries.map((country) => (
                <option key={country.code} value={country.name}>
                  {country.flag} {country.name}
                </option>
              ))}
            </select>
            <div className="absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none">
              <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </div>
          </div>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
          <input
            type="email"
            value={formData.email}
            onChange={(e) => handleChange('email', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Phone</label>
          <input
            type="tel"
            value={formData.phone}
            onChange={(e) => handleChange('phone', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
          <select
            value={formData.status}
            onChange={(e) => handleChange('status', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          >
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="pending">Pending</option>
          </select>
        </div>
      </div>
      
      <div className="flex justify-end space-x-3">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
        >
          Cancel
        </button>
        <button
          onClick={() => onSave(formData)}
          className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
        >
          Save
        </button>
      </div>
    </div>
  )
}

function AddExpenseModal({ onSave, onCancel }: AddExpenseModalProps) {
  const [formData, setFormData] = useState({
    date: '',
    unit: 'Apartment Burj Khalifa 2',
    category: '',
    contractor: '',
    amount: '',
    description: ''
  })
  
  const [files, setFiles] = useState<File[]>([])

  const handleChange = (field: string, value: string) => {
    setFormData({ ...formData, [field]: value })
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files)
      setFiles(prevFiles => [...prevFiles, ...newFiles])
    }
  }

  const handleRemoveFile = (index: number) => {
    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index))
  }

  const handleSubmit = () => {
    if (formData.date && formData.category && formData.contractor && formData.amount) {
      onSave({
        date: formData.date,
        unit: formData.unit,
        category: formData.category,
        contractor: formData.contractor,
        amount: parseInt(formData.amount),
        description: formData.description,
        files: files
      })
    }
  }

  return (
    <div>
      <div className="mb-4 space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Date</label>
          <input
            type="date"
            value={formData.date}
            onChange={(e) => handleChange('date', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Unit</label>
          <input
            type="text"
            value={formData.unit}
            onChange={(e) => handleChange('unit', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
          <select
            value={formData.category}
            onChange={(e) => handleChange('category', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          >
            <option value="">Select category</option>
            <option value="Electrical">Electrical</option>
            <option value="Plumbing">Plumbing</option>
            <option value="Cleaning">Cleaning</option>
            <option value="Maintenance">Maintenance</option>
            <option value="Repairs">Repairs</option>
            <option value="Other">Other</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Contractor</label>
          <input
            type="text"
            value={formData.contractor}
            onChange={(e) => handleChange('contractor', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            placeholder="Enter contractor name"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Amount ($)</label>
          <input
            type="number"
            value={formData.amount}
            onChange={(e) => handleChange('amount', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            placeholder="0"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
          <textarea
            value={formData.description}
            onChange={(e) => handleChange('description', e.target.value)}
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            rows={3}
            placeholder="Enter expense description"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Attach Files</label>
          <div className="relative">
          <input
            type="file"
            multiple
            onChange={handleFileChange}
              className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent cursor-pointer file:mr-4 file:py-1 file:px-3 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100"
            accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.xlsx,.xls"
          />
          </div>
          
          {/* Display selected files */}
          {files.length > 0 && (
            <div className="mt-3 space-y-2">
              <p className="text-sm text-gray-600">Selected files:</p>
              {files.map((file, index) => (
                <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-700">{file.name}</span>
                    <span className="text-xs text-gray-500">({(file.size / 1024).toFixed(1)} KB)</span>
                  </div>
                  <button
                    onClick={() => handleRemoveFile(index)}
                    className="text-red-500 hover:text-red-700 text-sm"
                  >
                    <X size={16} />
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
      
      <div className="flex justify-end space-x-3">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
        >
          Cancel
        </button>
        <button
          onClick={handleSubmit}
          className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
        >
          Add Expense
        </button>
      </div>
    </div>
  )
}

function AddUtilityModal({ onSave, onCancel }: AddUtilityModalProps) {
  const [formData, setFormData] = useState({
    title: '',
    description: ''
  })

  const handleChange = (field: string, value: string) => {
    setFormData({ ...formData, [field]: value })
  }

  const handleSubmit = () => {
    if (formData.title && formData.description) {
      onSave(formData)
    }
  }

  return (
    <div>
      <div className="mb-4 space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Utility Title</label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => handleChange('title', e.target.value)}
            placeholder="e.g., Electricity, Water, Internet"
            className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
          <textarea
            value={formData.description}
            onChange={(e) => handleChange('description', e.target.value)}
            rows={3}
            placeholder="Enter utility description"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical"
          />
        </div>
      </div>
      
      <div className="flex justify-end space-x-3">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
        >
          Cancel
        </button>
        <button
          onClick={handleSubmit}
          className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
        >
          Add Utility
        </button>
      </div>
    </div>
  )
}



interface PropertyDetailsProps {
  params: {
    id: string
  }
}

// Financial data interfaces
interface FinancialData {
  totalRevenue: number
  ownerPayout: number
  agencyFee: number
  expenses: Expense[]
  transactions: Transaction[]
  reservations: ReservationFinancial[]
  dateRange: {
    from: string
    to: string
  }
}

interface Expense {
  id: string
  category: string
  type: string
  amount: number
  description: string
  date: string
}

interface Transaction {
  id: string
  name: string
  date: string
  channel: string
  method: string
  status: 'completed' | 'pending' | 'failed'
  amount: number
}

interface ReservationFinancial {
  id: string
  guestName: string
  checkIn: string
  checkOut: string
  nights: number
  totalAmount: number
  status: string
}

interface Reservation {
  id: string
  guestName: string
  checkIn: string
  checkOut: string
  source: 'Airbnb' | 'Booking.com' | 'Direct' | 'Other'
  nights: number
  nightAmount: number
  totalPaid: number
  status: 'confirmed' | 'pending' | 'cancelled' | 'completed'
  guestEmail?: string
  guestPhone?: string
  specialRequests?: string
  createdAt: string
  updatedAt: string
}


export default function PropertyDetailsPage({ params }: PropertyDetailsProps) {
  const [activeTab, setActiveTab] = useState('overview')
  const [propertyNickname, setPropertyNickname] = useState('')
  const [propertyAddress, setPropertyAddress] = useState('')
  
  // API states
  const [property, setProperty] = useState<Property | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // Load property data from API
  useEffect(() => {
    const loadProperty = async () => {
      try {
        console.log('🔄 Loading property with ID:', params.id)
        setIsLoading(true)
        setError(null)
        
        const response = await propertyService.getProperty(params.id)
        
        if (response.success && response.data) {
          console.log('✅ Property loaded:', response.data)
          
          // Load financial data for default date range
    const today = new Date()
          const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate())
          loadFinancialData(lastMonth.toISOString().split('T')[0], today.toISOString().split('T')[0])
          
          // Load reservations
          loadReservations()
          
          // Load custom income distribution from localStorage if available
          const savedIncomeDistribution = localStorage.getItem(`income_distribution_${response.data.id}`)
          let propertyWithIncomeDistribution = response.data
          
          if (savedIncomeDistribution) {
            try {
              const customIncomeDistribution = JSON.parse(savedIncomeDistribution)
              propertyWithIncomeDistribution = {
                ...response.data,
                customIncomeDistribution
              }
              console.log('📊 Loaded custom income distribution from localStorage:', customIncomeDistribution)
            } catch (error) {
              console.error('Error parsing saved income distribution:', error)
            }
          }
          
          setProperty(propertyWithIncomeDistribution)
          
          // Load unit intake date from localStorage if available
          const savedUnitIntakeDate = localStorage.getItem(`unit_intake_date_${response.data.id}`)
          if (savedUnitIntakeDate) {
            setUnitIntakeDate(savedUnitIntakeDate)
            console.log('📅 Loaded unit intake date from localStorage:', savedUnitIntakeDate)
          }

          // Load check-in/check-out times from localStorage if available
          const savedCheckInTime = localStorage.getItem(`check_in_time_${response.data.id}`)
          if (savedCheckInTime) {
            setCheckInTime(savedCheckInTime)
            console.log('🕐 Loaded check-in time from localStorage:', savedCheckInTime)
          }

          const savedCheckOutTime = localStorage.getItem(`check_out_time_${response.data.id}`)
          if (savedCheckOutTime) {
            setCheckOutTime(savedCheckOutTime)
            console.log('🕐 Loaded check-out time from localStorage:', savedCheckOutTime)
          }

          // Load photos from localStorage if available
          const savedPhotos = localStorage.getItem(`photos_${response.data.id}`)
          
          if (savedPhotos) {
            try {
              const photosArray = JSON.parse(savedPhotos)
              
              // Filter out invalid blob URLs (they become invalid after page reload)
              const validPhotos = photosArray.filter((photo: string) => {
                return !photo.startsWith('blob:')
              })
              
              if (validPhotos.length !== photosArray.length) {
                // Update localStorage with only valid photos
                localStorage.setItem(`photos_${response.data.id}`, JSON.stringify(validPhotos))
              }
              
              setPhotos(validPhotos)
            } catch (error) {
              console.error('Error parsing saved photos:', error)
              setPhotos([])
            }
          } else {
            setPhotos([])
          }
          
          // Update nickname and address from API data
          setPropertyNickname(response.data.name)
          setPropertyAddress(response.data.address)
          
          // Load amenities from localStorage if available, otherwise from API
          const savedAmenities = localStorage.getItem(`amenities_${response.data.id}`)
          if (savedAmenities) {
            try {
              const amenitiesArray = JSON.parse(savedAmenities)
              setSelectedAmenities(amenitiesArray)
              console.log('🏠 Loaded amenities from localStorage:', amenitiesArray.length, amenitiesArray)
            } catch (error) {
              console.error('Error parsing saved amenities:', error)
              setSelectedAmenities(response.data.amenities || [])
            }
          } else {
            setSelectedAmenities(response.data.amenities || [])
            console.log('🏠 Loaded amenities from API:', response.data.amenities?.length || 0)
          }
          
          // Load rules from localStorage if available, otherwise from API
          const savedRules = localStorage.getItem(`rules_${response.data.id}`)
          if (savedRules) {
            try {
              const rulesArray = JSON.parse(savedRules)
              setSelectedRules(rulesArray)
              console.log('📋 Loaded rules from localStorage:', rulesArray.length, rulesArray)
            } catch (error) {
              console.error('Error parsing saved rules:', error)
              // Fallback to API data
              if (response.data.houseRules) {
                setSelectedRules(response.data.houseRules.split('\n').filter(rule => rule.trim()))
              } else {
                setSelectedRules([])
              }
            }
          } else {
            // Load from API data
            if (response.data.houseRules) {
              setSelectedRules(response.data.houseRules.split('\n').filter(rule => rule.trim()))
            } else {
              setSelectedRules([])
            }
            console.log('📋 Loaded rules from API:', response.data.houseRules?.split('\n').length || 0)
          }
          
          // Load utilities from localStorage if available
          const savedUtilities = localStorage.getItem(`utilities_${response.data.id}`)
          if (savedUtilities) {
            try {
              const utilitiesArray = JSON.parse(savedUtilities)
              setUtilities(utilitiesArray)
              console.log('🔧 Loaded utilities from localStorage:', utilitiesArray.length, utilitiesArray)
            } catch (error) {
              console.error('Error parsing saved utilities:', error)
              setUtilities([])
            }
          } else {
            setUtilities([])
            console.log('🔧 No saved utilities found in localStorage')
          }
          
          // Update owner data from API
          if (response.data.owner) {
            // Load phone, country, and flag from localStorage if available
            const savedPhone = localStorage.getItem(`owner_phone_${response.data.owner.id}`) || ''
            const savedCountry = localStorage.getItem(`owner_country_${response.data.owner.id}`) || 'UAE'
            const savedFlag = localStorage.getItem(`owner_flag_${response.data.owner.id}`) || '🇦🇪'
            
            setOwner({
              name: `${response.data.owner.firstName || ''} ${response.data.owner.lastName || ''}`.trim() || 'Unknown Owner',
              flag: savedFlag, // Load from localStorage
              country: savedCountry, // Load from localStorage
              email: response.data.owner.email || '',
              phone: savedPhone, // Load from localStorage
              status: response.data.owner.status || 'active'
            })
          }
        } else {
          console.error('❌ Failed to load property:', response.error)
          setError(response.error?.message || 'Failed to load property')
        }
      } catch (err) {
        console.error('💥 Error loading property:', err)
        setError(err instanceof Error ? err.message : 'An unexpected error occurred')
      } finally {
        setIsLoading(false)
      }
    }

    if (params.id) {
      loadProperty()
    }
  }, [params.id])

  // Load availability settings from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('availabilitySettings')
    if (saved) {
      try {
        setAvailabilitySettings(JSON.parse(saved))
        console.log('📅 Loaded availability settings from localStorage:', JSON.parse(saved))
      } catch (error) {
        console.error('Error loading availability settings:', error)
      }
    }
  }, [])

  // Load marketing data from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('marketingData')
    if (saved) {
      try {
        setMarketingData(JSON.parse(saved))
        console.log('📢 Loaded marketing data from localStorage:', JSON.parse(saved))
      } catch (error) {
        console.error('Error loading marketing data:', error)
      }
    }
  }, [])

  // Load marketing photos from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('marketingPhotos')
    console.log('📸 Attempting to load marketing photos from localStorage:', saved)
    if (saved) {
      try {
        const parsedPhotos = JSON.parse(saved)
        setMarketingPhotos(parsedPhotos)
        console.log('📸 Successfully loaded marketing photos from localStorage:', parsedPhotos)
        console.log('📸 Marketing photos count:', parsedPhotos.length)
      } catch (error) {
        console.error('Error loading marketing photos:', error)
      }
    } else {
      console.log('📸 No marketing photos found in localStorage')
    }
  }, [])
  

  const [dateRange, setDateRange] = useState('lastweek')
  const [dateFrom, setDateFrom] = useState('2024-09-01')
  const [dateTo, setDateTo] = useState('2024-09-30')

  const handleDateRangeChange = (range: string) => {
    setDateRange(range)
    
    if (range === 'custom') {
      // Keep current dates for custom selection
      return
    }
    
    const today = new Date()
    let fromDate = new Date()
    let toDate = new Date()
    
    switch (range) {
      case 'lastweek':
        fromDate.setDate(today.getDate() - 7)
        break
      case 'lastmonth':
        fromDate.setMonth(today.getMonth() - 1)
        break
      case 'last3month':
        fromDate.setMonth(today.getMonth() - 3)
        break
      case 'last6month':
        fromDate.setMonth(today.getMonth() - 6)
        break
      case 'lastyear':
        fromDate.setFullYear(today.getFullYear() - 1)
        break
      default:
        fromDate.setDate(today.getDate() - 7)
    }
    
    setDateFrom(fromDate.toISOString().split('T')[0])
    setDateTo(toDate.toISOString().split('T')[0])
  }
  const [editModal, setEditModal] = useState<{
    isOpen: boolean
    type: string
    field: string
    currentValue: string
    title: string
    inputType: string
  }>({
    isOpen: false,
    type: '',
    field: '',
    currentValue: '',
    title: '',
    inputType: 'text'
  })

  // State for modal input value
  const [modalInputValue, setModalInputValue] = useState('')

  // Debug useEffect for modal state
  useEffect(() => {
    console.log('🔍 Modal state changed:', { 
      isOpen: editModal.isOpen, 
      field: editModal.field, 
      modalInputValue 
    })
  }, [editModal.isOpen, editModal.field, modalInputValue])

  // Load financial data when date range changes
  useEffect(() => {
    if (dateFrom && dateTo) {
      loadFinancialData(dateFrom, dateTo)
    }
  }, [dateFrom, dateTo])


  const [selectedAmenities, setSelectedAmenities] = useState<string[]>([])

  // Available amenities list
  const amenities = [
    'WiFi', 'Air Conditioning', 'Heating', 'Kitchen', 'Refrigerator', 'Microwave', 'Dishwasher',
    'Washing Machine', 'Dryer', 'TV', 'Cable TV', 'Netflix', 'Sound System', 'Balcony',
    'Terrace', 'Garden', 'Pool', 'Hot Tub', 'Sauna', 'Gym', 'Parking', 'Garage',
    'Elevator', 'Security', 'Concierge', 'Housekeeping', 'Pet Friendly', 'Smoking Allowed',
    'Wheelchair Accessible', 'Fireplace', 'Workspace', 'High Chair', 'Crib', 'Iron',
    'Hair Dryer', 'Towels', 'Bed Linens', 'Coffee Maker', 'Toaster', 'Oven', 'Stove',
    'Dining Table', 'Sofa', 'Desk', 'Closet', 'Safe', 'First Aid Kit', 'Fire Extinguisher'
  ]

  // Available rules list
  const rules = [
    'No smoking', 'No pets', 'No parties', 'Quiet hours', 'No loud music',
    'No cooking', 'No guests', 'No children', 'No alcohol', 'No drugs',
    'Check-in after 3 PM', 'Check-out before 11 AM', 'No parking',
    'No shoes inside', 'No food in bedrooms', 'No candles', 'No open flames',
    'No weapons', 'No illegal activities', 'Respect neighbors', 'Keep noise down',
    'Clean up after yourself', 'Report damages', 'Follow building rules',
    'No commercial use', 'No subletting', 'No photography', 'No filming',
    'No events', 'No gatherings', 'No outdoor activities', 'No balcony use',
    'No laundry after 10 PM', 'No vacuuming on weekends', 'No construction',
    'No renovations', 'No painting', 'No drilling', 'No hammering'
  ]

  const [selectedRules, setSelectedRules] = useState<string[]>([])

  // Utilities state
  const [utilities, setUtilities] = useState<Array<{id: string, title: string, description: string}>>([])
  const [addUtilityModal, setAddUtilityModal] = useState(false)

  // Financial data state
  const [financialData, setFinancialData] = useState<FinancialData | null>(null)
  const [isLoadingFinancial, setIsLoadingFinancial] = useState(false)

  // Reservations state
  const [reservations, setReservations] = useState<Reservation[]>([])
  const [isLoadingReservations, setIsLoadingReservations] = useState(false)

  // Payment modal state
  const [showPaymentModal, setShowPaymentModal] = useState(false)

  // Reservation modal state
  const [showReservationModal, setShowReservationModal] = useState(false)

  // Expenses state
  const [expenses, setExpenses] = useState<Array<{
    id: string
    date: string
    category: string
    contractor: string
    amount: number
    description: string
  }>>([])
  const [showExpenseModal, setShowExpenseModal] = useState(false)

  // Documents state
  const [showDocumentModal, setShowDocumentModal] = useState(false)

  // Availability settings state
  const [availabilitySettings, setAvailabilitySettings] = useState({
    bookingWindow: 'all-days',
    advanceNotice: 'none',
    minStay: 3,
    maxStay: 365
  })
  const [isEditingAvailability, setIsEditingAvailability] = useState(false)

  // Marketing state
  const [marketingData, setMarketingData] = useState({
    title: 'Westwood l Next to Metro l Great Amenities',
    summary: 'Stay in this modern studio just steps from the metro! Perfect for travelers, it offers a comfy bed, smart TV, mini kitchenette, and a stylish bathroom. Big windows bring in plenty of natural light, making the space bright and inviting.\n\nWith easy access to transport, shopping, and dining, everything you need is right at your doorstep. Enjoy a hassle-free, comfortable stay in a prime location. Book now!',
    theSpace: 'Not defined',
    guestAccess: 'Not defined',
    neighborhood: 'Not defined',
    gettingAround: 'Not defined',
    otherNotes: 'Not defined',
    interactionWithGuests: 'Not defined'
  })
  const [isEditingMarketing, setIsEditingMarketing] = useState(false)
  const [channels, setChannels] = useState([
    { id: 'airbnb', name: 'Airbnb', connected: true, active: true },
    { id: 'booking', name: 'Booking.com', connected: true, active: true }
  ])
  const [marketingPhotos, setMarketingPhotos] = useState<Array<{
    id: string
    url: string
    isCover: boolean
  }>>([])
  const [showMarketingPhotoUpload, setShowMarketingPhotoUpload] = useState(false)

  // Saved Replies state
  const [savedReplies, setSavedReplies] = useState<Array<{
    id: string
    title: string
    content: string
    category: 'property-specific' | 'general'
    createdAt: string
    updatedAt: string
  }>>([])
  const [showAddReplyModal, setShowAddReplyModal] = useState(false)
  const [editingReply, setEditingReply] = useState<string | null>(null)
  const [replyForm, setReplyForm] = useState({
    title: '',
    content: '',
    category: 'property-specific' as 'property-specific' | 'general'
  })

  // Automation state
  const [autoResponseSettings, setAutoResponseSettings] = useState({
    isActive: false,
    nonConfirmed: {
      firstMessage: {
        enabled: false,
        delay: 0,
        message: '',
        savedReplyId: null as string | null
      },
      subsequentMessage: {
        enabled: false,
        delay: 0,
        message: '',
        savedReplyId: null as string | null
      }
    },
    confirmed: {
      beforeCheckin: {
        enabled: false,
        delay: 0,
        message: '',
        savedReplyId: null as string | null
      },
      checkinDay: {
        enabled: false,
        delay: 0,
        message: '',
        savedReplyId: null as string | null
      },
      checkoutDay: {
        enabled: false,
        delay: 0,
        message: '',
        savedReplyId: null as string | null
      },
      duringStay: {
        enabled: false,
        delay: 0,
        message: '',
        savedReplyId: null as string | null
      },
      afterCheckout: {
        enabled: false,
        delay: 0,
        message: '',
        savedReplyId: null as string | null
      }
    }
  })
  const [showAutoResponseModal, setShowAutoResponseModal] = useState(false)
  const [editingAutoResponse, setEditingAutoResponse] = useState<{
    type: 'nonConfirmed' | 'confirmed'
    trigger: string
  } | null>(null)

  // Track marketingPhotos changes
  useEffect(() => {
    if (marketingPhotos) {
      console.log('📸 Marketing photos state changed:', marketingPhotos)
      console.log('📸 Marketing photos length:', marketingPhotos.length)
    }
  }, [marketingPhotos])

  // Load saved replies from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('savedReplies')
    if (saved) {
      try {
        const parsedReplies = JSON.parse(saved)
        setSavedReplies(parsedReplies)
        console.log('💬 Loaded saved replies from localStorage:', parsedReplies)
      } catch (error) {
        console.error('Error loading saved replies:', error)
      }
    }
  }, [])

  // Load automation settings from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('autoResponseSettings')
    if (saved) {
      try {
        const parsedSettings = JSON.parse(saved)
        setAutoResponseSettings(parsedSettings)
        console.log('🤖 Loaded automation settings from localStorage:', parsedSettings)
      } catch (error) {
        console.error('Error loading automation settings:', error)
      }
    }
  }, [])

  // Form states for modals
  const [paymentForm, setPaymentForm] = useState({
    name: '',
    amount: '',
    method: '',
    channel: '',
    description: ''
  })

  const [reservationForm, setReservationForm] = useState({
    guestName: '',
    guestEmail: '',
    guestPhone: '',
    checkIn: '',
    checkOut: '',
    source: '',
    nightAmount: '',
    totalAmount: '',
    status: '',
    specialRequests: ''
  })

  const [expenseForm, setExpenseForm] = useState({
    date: '',
    category: '',
    contractor: '',
    amount: '',
    description: ''
  })

  const [documentForm, setDocumentForm] = useState({
    title: '',
    type: '',
    description: ''
  })

  const [owner, setOwner] = useState({
    name: '',
    flag: '🇦🇪',
    country: 'UAE',
    email: '',
    phone: '',
    status: 'active'
  })

  // Countries list with flags
  const countries = [
    { code: 'AE', name: 'United Arab Emirates', flag: '🇦🇪' },
    { code: 'US', name: 'United States', flag: '🇺🇸' },
    { code: 'GB', name: 'United Kingdom', flag: '🇬🇧' },
    { code: 'CA', name: 'Canada', flag: '🇨🇦' },
    { code: 'AU', name: 'Australia', flag: '🇦🇺' },
    { code: 'DE', name: 'Germany', flag: '🇩🇪' },
    { code: 'FR', name: 'France', flag: '🇫🇷' },
    { code: 'IT', name: 'Italy', flag: '🇮🇹' },
    { code: 'ES', name: 'Spain', flag: '🇪🇸' },
    { code: 'NL', name: 'Netherlands', flag: '🇳🇱' },
    { code: 'CH', name: 'Switzerland', flag: '🇨🇭' },
    { code: 'AT', name: 'Austria', flag: '🇦🇹' },
    { code: 'BE', name: 'Belgium', flag: '🇧🇪' },
    { code: 'SE', name: 'Sweden', flag: '🇸🇪' },
    { code: 'NO', name: 'Norway', flag: '🇳🇴' },
    { code: 'DK', name: 'Denmark', flag: '🇩🇰' },
    { code: 'FI', name: 'Finland', flag: '🇫🇮' },
    { code: 'IE', name: 'Ireland', flag: '🇮🇪' },
    { code: 'PT', name: 'Portugal', flag: '🇵🇹' },
    { code: 'GR', name: 'Greece', flag: '🇬🇷' },
    { code: 'PL', name: 'Poland', flag: '🇵🇱' },
    { code: 'CZ', name: 'Czech Republic', flag: '🇨🇿' },
    { code: 'HU', name: 'Hungary', flag: '🇭🇺' },
    { code: 'RO', name: 'Romania', flag: '🇷🇴' },
    { code: 'BG', name: 'Bulgaria', flag: '🇧🇬' },
    { code: 'HR', name: 'Croatia', flag: '🇭🇷' },
    { code: 'SI', name: 'Slovenia', flag: '🇸🇮' },
    { code: 'SK', name: 'Slovakia', flag: '🇸🇰' },
    { code: 'LT', name: 'Lithuania', flag: '🇱🇹' },
    { code: 'LV', name: 'Latvia', flag: '🇱🇻' },
    { code: 'EE', name: 'Estonia', flag: '🇪🇪' },
    { code: 'CY', name: 'Cyprus', flag: '🇨🇾' },
    { code: 'MT', name: 'Malta', flag: '🇲🇹' },
    { code: 'LU', name: 'Luxembourg', flag: '🇱🇺' },
    { code: 'JP', name: 'Japan', flag: '🇯🇵' },
    { code: 'KR', name: 'South Korea', flag: '🇰🇷' },
    { code: 'CN', name: 'China', flag: '🇨🇳' },
    { code: 'IN', name: 'India', flag: '🇮🇳' },
    { code: 'SG', name: 'Singapore', flag: '🇸🇬' },
    { code: 'HK', name: 'Hong Kong', flag: '🇭🇰' },
    { code: 'MY', name: 'Malaysia', flag: '🇲🇾' },
    { code: 'TH', name: 'Thailand', flag: '🇹🇭' },
    { code: 'PH', name: 'Philippines', flag: '🇵🇭' },
    { code: 'ID', name: 'Indonesia', flag: '🇮🇩' },
    { code: 'VN', name: 'Vietnam', flag: '🇻🇳' },
    { code: 'BR', name: 'Brazil', flag: '🇧🇷' },
    { code: 'AR', name: 'Argentina', flag: '🇦🇷' },
    { code: 'CL', name: 'Chile', flag: '🇨🇱' },
    { code: 'CO', name: 'Colombia', flag: '🇨🇴' },
    { code: 'MX', name: 'Mexico', flag: '🇲🇽' },
    { code: 'ZA', name: 'South Africa', flag: '🇿🇦' },
    { code: 'EG', name: 'Egypt', flag: '🇪🇬' },
    { code: 'MA', name: 'Morocco', flag: '🇲🇦' },
    { code: 'NG', name: 'Nigeria', flag: '🇳🇬' },
    { code: 'KE', name: 'Kenya', flag: '🇰🇪' },
    { code: 'RU', name: 'Russia', flag: '🇷🇺' },
    { code: 'TR', name: 'Turkey', flag: '🇹🇷' },
    { code: 'SA', name: 'Saudi Arabia', flag: '🇸🇦' },
    { code: 'KW', name: 'Kuwait', flag: '🇰🇼' },
    { code: 'QA', name: 'Qatar', flag: '🇶🇦' },
    { code: 'BH', name: 'Bahrain', flag: '🇧🇭' },
    { code: 'OM', name: 'Oman', flag: '🇴🇲' },
    { code: 'JO', name: 'Jordan', flag: '🇯🇴' },
    { code: 'LB', name: 'Lebanon', flag: '🇱🇧' },
    { code: 'IL', name: 'Israel', flag: '🇮🇱' }
  ]

  const [incomeDistributionModal, setIncomeDistributionModal] = useState(false)
  const [unitIntakeDate, setUnitIntakeDate] = useState('15.03.2024')
  const [checkInTime, setCheckInTime] = useState('15:00')
  const [checkOutTime, setCheckOutTime] = useState('12:00')
  const [photos, setPhotos] = useState<string[]>([])
  const fileInputRef = useRef<HTMLInputElement>(null)
  

  const [isReservationModalOpen, setIsReservationModalOpen] = useState(false)
  const [addBookingModal, setAddBookingModal] = useState(false)
  const [currentDate, setCurrentDate] = useState(new Date())
  
  // Saved replies states
  const [savedRepliesModal, setSavedRepliesModal] = useState({
    isOpen: false,
    type: '', // 'single', 'multiple', 'folder'
    title: '',
    replyData: null
  })
  
  // Automation states
  const [autoResponseModal, setAutoResponseModal] = useState({
    isOpen: false,
    type: '', // 'non-confirmed', 'confirmed'
    trigger: '', // 'first-message', 'subsequent', 'before-checkin', etc.
    title: '',
    content: ''
  })
  
  const [autoReviewsSettings, setAutoReviewsSettings] = useState({
    isActive: true,
    delay: 3,
    rating: 5,
    template: 'If no templates are set, we will use our own template.'
  })

  // Mock calendar data for this specific property
  const mockCalendarData = {
    start_date: '2025-01-01',
    properties: [
      {
        id: parseInt(params.id),
        name: 'Apartment Burj Khalifa 2', // This will be the nickname from CRM
        units: [
          {
            id: parseInt(params.id),
            name: 'Apartment Burj Khalifa 2', // This will be the nickname from CRM
            reservations: [
              {
                id: 1,
                check_in: '2025-01-05',
                check_out: '2025-01-08',
                guest_name: 'John Smith',
                status: 'confirmed',
                source: 'Airbnb',
                color: '#3B82F6'
              },
              {
                id: 2,
                check_in: '2025-01-15',
                check_out: '2025-01-18',
                guest_name: 'Sarah Johnson',
                status: 'confirmed',
                source: 'Booking.com',
                color: '#10B981'
              },
              {
                id: 3,
                check_in: '2025-01-25',
                check_out: '2025-01-28',
                guest_name: 'Mike Davis',
                status: 'pending',
                source: 'Direct',
                color: '#F59E0B'
              }
            ],
            pricing: [
              { date: '2025-01-01', price: 350 },
              { date: '2025-01-02', price: 350 },
              { date: '2025-01-03', price: 380 },
              { date: '2025-01-04', price: 380 },
              { date: '2025-01-05', price: 420 },
              { date: '2025-01-06', price: 420 },
              { date: '2025-01-07', price: 420 },
              { date: '2025-01-08', price: 420 },
              { date: '2025-01-09', price: 380 },
              { date: '2025-01-10', price: 380 }
            ]
          }
        ]
      }
    ]
  }

  const handleCellClick = (date: string, unitId: number) => {
    console.log('Cell clicked:', { date, unitId })
    setIsReservationModalOpen(true)
  }

  const handleReservationClick = (reservation: any) => {
    console.log('Reservation clicked:', reservation)
    // Open reservation details modal
  }

  const handleReservationDragStart = (e: React.DragEvent, reservation: any) => {
    e.dataTransfer.setData('application/json', JSON.stringify(reservation))
    e.dataTransfer.effectAllowed = 'move'
  }

  const handleReservationDragEnd = (e: React.DragEvent) => {
    // Clean up any drag state
  }

  const handleCellDrop = (e: React.DragEvent, date: string, unitId: number) => {
    e.preventDefault()
    const reservationData = e.dataTransfer.getData('application/json')
    if (reservationData) {
      const reservation = JSON.parse(reservationData)
      console.log('Reservation dropped:', { reservation, date, unitId })
      // Handle reservation move logic here
    }
  }



  const handleAutoReviewsToggle = () => {
    setAutoReviewsSettings(prev => ({ ...prev, isActive: !prev.isActive }))
  }

  const handleAutoReviewsDelayChange = (delay: number) => {
    setAutoReviewsSettings(prev => ({ ...prev, delay }))
  }

  const handleAutoReviewsRatingChange = (rating: number) => {
    setAutoReviewsSettings(prev => ({ ...prev, rating }))
  }

  const handleAutoReviewsTemplateChange = (template: string) => {
    setAutoReviewsSettings(prev => ({ ...prev, template }))
  }



  // Documents state
  const [documents, setDocuments] = useState<Array<{
    id: string
    title: string
    fileName: string
    uploadDate: string
    fileSize: string
    type: string
    uploadedBy: string
    uploadedByEmail: string
  }>>([])


  // Mock reservations data for financial table

  const tabs = [
    { id: 'overview', label: 'Overview' },
    { id: 'financial', label: 'Financial' },
    { id: 'expenses', label: 'Expenses' },
    { id: 'documents', label: 'Documents' },
    { id: 'availability', label: 'Availability settings' },
    { id: 'monthly-calendar', label: 'Monthly Calendar' },
    { id: 'marketing', label: 'Marketing' },
    { id: 'saved-replies', label: 'Saved replies' },
    { id: 'automation', label: 'Automation' }
  ]

  const handleEditField = (type: string, field: string, currentValue: string, title: string, inputType: string = 'text') => {
    console.log('🔄 Opening edit modal:', { type, field, currentValue, title, inputType })
    setEditModal({
      isOpen: true,
      type,
      field,
      currentValue,
      title,
      inputType
    })
    // Set the initial value for the modal input
    setModalInputValue(currentValue)
    console.log('✅ Modal state set, modalInputValue:', currentValue)
  }

  const handleSaveEdit = async () => {
    const newValue = modalInputValue
    console.log('💾 handleSaveEdit called with:', { newValue, modalInputValue, editModal })
    try {
    console.log(`Saving ${editModal.field}: ${newValue}`)
    
      // Prepare update data based on field type
      let updateData: any = {}
      
      switch (editModal.field) {
        case 'nickname':
          updateData.name = newValue
          break
        case 'description':
          console.log('🔄 Updating description:', newValue)
          updateData.description = newValue
          break
        case 'type':
          updateData.type = newValue.toUpperCase()
          break
        case 'location':
          updateData.city = newValue
          break
        case 'address':
          updateData.address = newValue
          break
        case 'size':
          updateData.area = parseInt(newValue) || null
          break
        case 'beds':
          updateData.bedrooms = parseInt(newValue) || 1
          break
        case 'bathrooms':
          updateData.bathrooms = parseInt(newValue) || 1
          break
        case 'capacity':
          updateData.capacity = parseInt(newValue) || 1
          break
        case 'price':
          updateData.pricePerNight = parseInt(newValue) || 100
          break
        case 'unit_intake_date':
          // Update local state for unit intake date
          setUnitIntakeDate(newValue)
          // Save to localStorage for persistence
          localStorage.setItem(`unit_intake_date_${params.id}`, newValue)
          console.log('✅ Unit intake date updated:', newValue)
          setEditModal({ ...editModal, isOpen: false })
          return
        case 'check_in_time':
          // Update local state for check-in time
          setCheckInTime(newValue)
          // Save to localStorage for persistence
          localStorage.setItem(`check_in_time_${params.id}`, newValue)
          console.log('✅ Check-in time updated:', newValue)
          setEditModal({ ...editModal, isOpen: false })
          return
        case 'check_out_time':
          // Update local state for check-out time
          setCheckOutTime(newValue)
          // Save to localStorage for persistence
          localStorage.setItem(`check_out_time_${params.id}`, newValue)
          console.log('✅ Check-out time updated:', newValue)
          setEditModal({ ...editModal, isOpen: false })
          return
        default:
          console.log('Unknown field:', editModal.field)
          setEditModal({ ...editModal, isOpen: false })
          return
      }
      
      // Send update to API
      const response = await propertyService.updateProperty(params.id, updateData)
      
      if (response.success && response.data) {
        console.log('✅ Property updated successfully:', response.data)
        
        // Update local state
        setProperty(response.data)
        
        // Update specific fields based on what was changed
    if (editModal.field === 'nickname') {
      setPropertyNickname(newValue)
        } else if (editModal.field === 'address') {
          setPropertyAddress(newValue)
        }
        
        // Update amenities if they were changed
        setSelectedAmenities(response.data.amenities || [])
        
        // All other fields are already updated in property state
        
        // Show success message (you can add toast notification here)
        console.log('✅ Property updated successfully!')
        console.log('📝 Updated property data:', response.data)
      } else {
        console.error('❌ Failed to update property:', response.error)
        // Show error message (you can add toast notification here)
        console.error('Failed to update property:', response.error?.message)
      }
    } catch (error) {
      console.error('💥 Error updating property:', error)
      // Show error message (you can add toast notification here)
      console.error('An unexpected error occurred while updating property')
    }
    
    setEditModal({ ...editModal, isOpen: false })
  }

  const handleCloseEdit = () => {
    setEditModal({ ...editModal, isOpen: false })
    setModalInputValue('')
  }

  const handleEditAmenities = () => {
    setEditModal({
      isOpen: true,
      type: 'amenities',
      field: 'amenities',
      currentValue: '',
      title: 'Amenities',
      inputType: 'checkbox'
    })
  }

  const handleSaveAmenities = (newAmenities: string[]) => {
    setSelectedAmenities(newAmenities)
    
    // Save to localStorage
    localStorage.setItem(`amenities_${params.id}`, JSON.stringify(newAmenities))
    console.log('🏠 Amenities saved:', newAmenities)
    
    setEditModal({ ...editModal, isOpen: false })
  }

  const handleEditRules = () => {
    setEditModal({
      isOpen: true,
      type: 'rules',
      field: 'rules',
      currentValue: '',
      title: 'Rules',
      inputType: 'checkbox'
    })
  }

  const handleSaveRules = (newRules: string[]) => {
    setSelectedRules(newRules)
    
    // Save to localStorage
    localStorage.setItem(`rules_${params.id}`, JSON.stringify(newRules))
    console.log('📋 Rules saved:', newRules)
    
    setEditModal({ ...editModal, isOpen: false })
  }

  // Utilities functions
  const handleAddUtility = () => {
    setAddUtilityModal(true)
  }

  const handleSaveUtility = (utility: { title: string; description: string }) => {
    const newUtility = {
      id: Date.now().toString(),
      title: utility.title,
      description: utility.description
    }
    
    const updatedUtilities = [...utilities, newUtility]
    setUtilities(updatedUtilities)
    
    // Save to localStorage
    localStorage.setItem(`utilities_${params.id}`, JSON.stringify(updatedUtilities))
    console.log('🔧 Utility added:', newUtility)
    
    setAddUtilityModal(false)
  }

  const handleRemoveUtility = (id: string) => {
    const updatedUtilities = utilities.filter(utility => utility.id !== id)
    setUtilities(updatedUtilities)
    
    // Save to localStorage
    localStorage.setItem(`utilities_${params.id}`, JSON.stringify(updatedUtilities))
    console.log('🗑️ Utility removed:', id)
  }

  const handleCancelAddUtility = () => {
    setAddUtilityModal(false)
  }

  // Financial data functions
  const loadFinancialData = async (dateFrom: string, dateTo: string) => {
    setIsLoadingFinancial(true)
    try {
      // TODO: Replace with actual API call
      const emptyFinancialData: FinancialData = {
        totalRevenue: 0,
        ownerPayout: 0,
        agencyFee: 0,
        expenses: [],
        transactions: [],
        reservations: [],
        dateRange: {
          from: dateFrom,
          to: dateTo
        }
      }
      
      setFinancialData(emptyFinancialData)
      console.log('📊 Financial data loaded (empty):', emptyFinancialData)
    } catch (error) {
      console.error('Error loading financial data:', error)
    } finally {
      setIsLoadingFinancial(false)
    }
  }

  // Reservations functions
  const loadReservations = async () => {
    setIsLoadingReservations(true)
    try {
      // TODO: Replace with actual API call
      const emptyReservationsData: Reservation[] = []
      
      setReservations(emptyReservationsData)
      console.log('📅 Reservations loaded (empty):', emptyReservationsData)
    } catch (error) {
      console.error('Error loading reservations:', error)
    } finally {
      setIsLoadingReservations(false)
    }
  }

  // Payment functions
  const handleNewPayment = () => {
    setShowPaymentModal(true)
    console.log('💳 Opening new payment modal')
  }

  const handleClosePaymentModal = () => {
    setShowPaymentModal(false)
    setPaymentForm({
      name: '',
      amount: '',
      method: '',
      channel: '',
      description: ''
    })
    console.log('💳 Closing payment modal')
  }

  // Reservation functions
  const handleNewReservation = () => {
    setShowReservationModal(true)
    console.log('📅 Opening new reservation modal')
  }

  const handleCloseReservationModal = () => {
    setShowReservationModal(false)
    setReservationForm({
      guestName: '',
      guestEmail: '',
      guestPhone: '',
      checkIn: '',
      checkOut: '',
      source: '',
      nightAmount: '',
      totalAmount: '',
      status: '',
      specialRequests: ''
    })
    console.log('📅 Closing reservation modal')
  }

  // Create payment function
  const handleCreatePayment = () => {
    if (!paymentForm.name || !paymentForm.amount || !paymentForm.method || !paymentForm.channel) {
      alert('Please fill in all required fields')
      return
    }

    const newTransaction: Transaction = {
      id: `TXN${Date.now()}`,
      name: paymentForm.name,
      date: new Date().toISOString().split('T')[0],
      channel: paymentForm.channel,
      method: paymentForm.method,
      status: 'completed',
      amount: parseFloat(paymentForm.amount)
    }

    // Add to financial data
    setFinancialData(prev => {
      if (!prev) return prev
      return {
        ...prev,
        transactions: [newTransaction, ...prev.transactions],
        totalRevenue: prev.totalRevenue + newTransaction.amount,
        ownerPayout: prev.ownerPayout + (newTransaction.amount * 0.8),
        agencyFee: prev.agencyFee + (newTransaction.amount * 0.2)
      }
    })

    console.log('💳 Payment created:', newTransaction)
    handleClosePaymentModal()
    alert('Payment created successfully!')
  }

  // Create reservation function
  const handleCreateReservation = () => {
    if (!reservationForm.guestName || !reservationForm.checkIn || !reservationForm.checkOut || !reservationForm.source) {
      alert('Please fill in all required fields')
      return
    }

    const checkInDate = new Date(reservationForm.checkIn)
    const checkOutDate = new Date(reservationForm.checkOut)
    const nights = Math.ceil((checkOutDate.getTime() - checkInDate.getTime()) / (1000 * 60 * 60 * 24))

    const newReservation: Reservation = {
      id: `RES${Date.now()}`,
      guestName: reservationForm.guestName,
      checkIn: reservationForm.checkIn,
      checkOut: reservationForm.checkOut,
      source: reservationForm.source as 'Airbnb' | 'Booking.com' | 'Direct' | 'Other',
      nights: nights,
      nightAmount: parseFloat(reservationForm.nightAmount) || 0,
      totalPaid: parseFloat(reservationForm.totalAmount) || (parseFloat(reservationForm.nightAmount) * nights),
      status: (reservationForm.status as 'confirmed' | 'pending' | 'cancelled' | 'completed') || 'pending',
      guestEmail: reservationForm.guestEmail,
      guestPhone: reservationForm.guestPhone,
      specialRequests: reservationForm.specialRequests,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }

    // Add to reservations
    setReservations(prev => [newReservation, ...prev])

    console.log('📅 Reservation created:', newReservation)
    handleCloseReservationModal()
    alert('Reservation created successfully!')
  }

  // Expenses functions
  const handleAddExpense = () => {
    setShowExpenseModal(true)
    console.log('💰 Opening add expense modal')
  }

  const handleCloseExpenseModal = () => {
    setShowExpenseModal(false)
    setExpenseForm({
      date: '',
      category: '',
      contractor: '',
      amount: '',
      description: ''
    })
    console.log('💰 Closing expense modal')
  }

  const handleCreateExpense = () => {
    if (!expenseForm.date || !expenseForm.category || !expenseForm.contractor || !expenseForm.amount) {
      alert('Please fill in all required fields')
      return
    }

    const newExpense = {
      id: `EXP${Date.now()}`,
      date: expenseForm.date,
      category: expenseForm.category,
      contractor: expenseForm.contractor,
      amount: parseFloat(expenseForm.amount),
      description: expenseForm.description
    }

    setExpenses(prev => [newExpense, ...prev])
    console.log('💰 Expense created:', newExpense)
    handleCloseExpenseModal()
    alert('Expense created successfully!')
  }

  // Documents functions
  const handleAddDocument = () => {
    setShowDocumentModal(true)
    console.log('📄 Opening add document modal')
  }

  const handleCloseDocumentModal = () => {
    setShowDocumentModal(false)
    setDocumentForm({
      title: '',
      type: '',
      description: ''
    })
    console.log('📄 Closing document modal')
  }

  const handleCreateDocument = () => {
    if (!documentForm.title || !documentForm.type) {
      alert('Please fill in all required fields')
      return
    }

    const newDocument = {
      id: `DOC${Date.now()}`,
      title: documentForm.title,
      fileName: `${documentForm.title.toLowerCase().replace(/\s+/g, '_')}.pdf`,
      uploadDate: new Date().toISOString(),
      fileSize: '0.0 MB',
      type: documentForm.type,
      uploadedBy: 'Current User',
      uploadedByEmail: 'user@example.com'
    }

    setDocuments(prev => [newDocument, ...prev])
    console.log('📄 Document created:', newDocument)
    handleCloseDocumentModal()
    alert('Document created successfully!')
  }

  // Availability settings functions
  const handleEditAvailability = () => {
    setIsEditingAvailability(true)
    console.log('📅 Opening availability settings for editing')
  }

  const handleSaveAvailability = () => {
    // Save to localStorage for persistence
    localStorage.setItem('availabilitySettings', JSON.stringify(availabilitySettings))
    setIsEditingAvailability(false)
    console.log('📅 Availability settings saved:', availabilitySettings)
    alert('Availability settings saved successfully!')
  }

  const handleCancelAvailability = () => {
    // Reset to saved values
    const saved = localStorage.getItem('availabilitySettings')
    if (saved) {
      setAvailabilitySettings(JSON.parse(saved))
    }
    setIsEditingAvailability(false)
    console.log('📅 Availability settings editing cancelled')
  }

  const handleAvailabilityChange = (field: string, value: string | number) => {
    setAvailabilitySettings(prev => ({
      ...prev,
      [field]: value
    }))
  }

  // Marketing functions
  const handleEditMarketing = () => {
    setIsEditingMarketing(true)
    console.log('📢 Opening marketing settings for editing')
  }

  const handleSaveMarketing = () => {
    // Save to localStorage for persistence
    localStorage.setItem('marketingData', JSON.stringify(marketingData))
    localStorage.setItem('marketingPhotos', JSON.stringify(marketingPhotos))
    setIsEditingMarketing(false)
    console.log('📢 Marketing data saved:', marketingData)
    console.log('📸 Marketing photos saved:', marketingPhotos)
    alert('Marketing data and photos saved successfully! Changes will be synced to Airbnb and Booking.com')
  }

  const handleCancelMarketing = () => {
    // Reset to saved values
    const savedData = localStorage.getItem('marketingData')
    const savedPhotos = localStorage.getItem('marketingPhotos')
    if (savedData) {
      setMarketingData(JSON.parse(savedData))
    }
    if (savedPhotos) {
      setMarketingPhotos(JSON.parse(savedPhotos))
    }
    setIsEditingMarketing(false)
    console.log('📢 Marketing settings editing cancelled')
  }

  const handleMarketingChange = (field: string, value: string) => {
    setMarketingData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleChannelToggle = (channelId: string) => {
    setChannels(prev => prev.map(channel => 
      channel.id === channelId 
        ? { ...channel, active: !channel.active }
        : channel
    ))
    console.log('📢 Channel toggled:', channelId)
  }

  // Marketing photos functions
  const handleMarketingPhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (!files || files.length === 0) return

    const newPhotos = Array.from(files).map((file, index) => ({
      id: `marketing_photo_${Date.now()}_${index}`,
      url: URL.createObjectURL(file),
      isCover: marketingPhotos.length === 0 && index === 0 // First photo is cover by default
    }))

    const updatedPhotos = [...marketingPhotos, ...newPhotos]
    setMarketingPhotos(updatedPhotos)
    
    // Auto-save to localStorage
    localStorage.setItem('marketingPhotos', JSON.stringify(updatedPhotos))
    console.log('📸 Marketing photos uploaded and saved:', updatedPhotos)
  }

  const handleSetMarketingCoverPhoto = (photoId: string) => {
    const updatedPhotos = marketingPhotos.map(photo => ({
      ...photo,
      isCover: photo.id === photoId
    }))
    setMarketingPhotos(updatedPhotos)
    
    // Auto-save to localStorage
    localStorage.setItem('marketingPhotos', JSON.stringify(updatedPhotos))
    console.log('📸 Marketing cover photo set and saved:', photoId)
  }

  const handleRemoveMarketingPhoto = (photoId: string) => {
    const updated = marketingPhotos.filter(photo => photo.id !== photoId)
    // If we removed the cover photo, set the first remaining photo as cover
    if (updated.length > 0 && !updated.some(photo => photo.isCover)) {
      updated[0].isCover = true
    }
    setMarketingPhotos(updated)
    
    // Auto-save to localStorage
    localStorage.setItem('marketingPhotos', JSON.stringify(updated))
    console.log('📸 Marketing photo removed and saved:', photoId)
  }

  const handleSyncPhotosFromMain = () => {
    // Sync photos from main Photos block
    const mainPhotos = photos.map((photo: any) => ({
      id: `marketing_${photo.id}`,
      url: photo.url,
      isCover: photo.isCover
    }))
    setMarketingPhotos(mainPhotos)
    
    // Auto-save to localStorage
    localStorage.setItem('marketingPhotos', JSON.stringify(mainPhotos))
    console.log('📸 Photos synced from main block and saved:', mainPhotos)
    alert('Photos synced from main Photos block!')
  }

  // Saved Replies functions
  const handleAddNewReply = () => {
    setReplyForm({
      title: '',
      content: '',
      category: 'property-specific'
    })
    setEditingReply(null)
    setShowAddReplyModal(true)
    console.log('💬 Opening add new reply modal')
  }

  const handleEditReply = (replyId: string) => {
    const reply = savedReplies.find(r => r.id === replyId)
    if (reply) {
      setReplyForm({
        title: reply.title,
        content: reply.content,
        category: reply.category
      })
      setEditingReply(replyId)
      setShowAddReplyModal(true)
      console.log('💬 Editing reply:', reply)
    }
  }

  const handleSaveReply = () => {
    if (!replyForm.title || !replyForm.content) {
      alert('Please fill in all required fields')
      return
    }

    const now = new Date().toISOString()
    
    if (editingReply) {
      // Update existing reply
      const updatedReplies = savedReplies.map(reply => 
        reply.id === editingReply 
          ? { ...reply, ...replyForm, updatedAt: now }
          : reply
      )
      setSavedReplies(updatedReplies)
      localStorage.setItem('savedReplies', JSON.stringify(updatedReplies))
      console.log('💬 Reply updated:', replyForm)
    } else {
      // Create new reply
      const newReply = {
        id: `reply_${Date.now()}`,
        ...replyForm,
        createdAt: now,
        updatedAt: now
      }
      const updatedReplies = [...savedReplies, newReply]
      setSavedReplies(updatedReplies)
      localStorage.setItem('savedReplies', JSON.stringify(updatedReplies))
      console.log('💬 New reply created:', newReply)
    }

    setShowAddReplyModal(false)
    setEditingReply(null)
    setReplyForm({ title: '', content: '', category: 'property-specific' })
    alert('Reply saved successfully!')
  }

  const handleDeleteReply = (replyId: string) => {
    if (confirm('Are you sure you want to delete this reply?')) {
      const updatedReplies = savedReplies.filter(reply => reply.id !== replyId)
      setSavedReplies(updatedReplies)
      localStorage.setItem('savedReplies', JSON.stringify(updatedReplies))
      console.log('💬 Reply deleted:', replyId)
      alert('Reply deleted successfully!')
    }
  }

  const handleReplyClick = (replyTitle: string) => {
    const reply = savedReplies.find(r => r.title === replyTitle)
    if (reply) {
      console.log('💬 Reply clicked:', reply)
      alert(`Reply: ${reply.content}`)
    } else {
      console.log('💬 Reply not found:', replyTitle)
    }
  }

  const handleCloseReplyModal = () => {
    setShowAddReplyModal(false)
    setEditingReply(null)
    setReplyForm({ title: '', content: '', category: 'property-specific' })
  }

  // Automation functions
  const handleAutoResponseToggle = () => {
    setAutoResponseSettings(prev => ({
      ...prev,
      isActive: !prev.isActive
    }))
    localStorage.setItem('autoResponseSettings', JSON.stringify({
      ...autoResponseSettings,
      isActive: !autoResponseSettings.isActive
    }))
    console.log('🤖 Auto response toggled:', !autoResponseSettings.isActive)
  }

  const handleAutoResponseConfigure = (type: 'nonConfirmed' | 'confirmed', trigger: string) => {
    setEditingAutoResponse({ type, trigger })
    setShowAutoResponseModal(true)
    console.log('🤖 Configuring auto response:', { type, trigger })
  }

  const handleSaveAutoResponse = (data: any) => {
    if (!editingAutoResponse) return

    const { type, trigger } = editingAutoResponse
    const updatedSettings = { ...autoResponseSettings }
    
    if (type === 'nonConfirmed') {
      if (trigger === 'first-message') {
        updatedSettings.nonConfirmed.firstMessage = {
          ...updatedSettings.nonConfirmed.firstMessage,
          ...data
        }
      } else if (trigger === 'subsequent') {
        updatedSettings.nonConfirmed.subsequentMessage = {
          ...updatedSettings.nonConfirmed.subsequentMessage,
          ...data
        }
      }
    } else if (type === 'confirmed') {
      if (trigger === 'before-checkin') {
        updatedSettings.confirmed.beforeCheckin = {
          ...updatedSettings.confirmed.beforeCheckin,
          ...data
        }
      } else if (trigger === 'checkin-day') {
        updatedSettings.confirmed.checkinDay = {
          ...updatedSettings.confirmed.checkinDay,
          ...data
        }
      } else if (trigger === 'checkout-day') {
        updatedSettings.confirmed.checkoutDay = {
          ...updatedSettings.confirmed.checkoutDay,
          ...data
        }
      } else if (trigger === 'during-stay') {
        updatedSettings.confirmed.duringStay = {
          ...updatedSettings.confirmed.duringStay,
          ...data
        }
      } else if (trigger === 'after-checkout') {
        updatedSettings.confirmed.afterCheckout = {
          ...updatedSettings.confirmed.afterCheckout,
          ...data
        }
      }
    }

    setAutoResponseSettings(updatedSettings)
    localStorage.setItem('autoResponseSettings', JSON.stringify(updatedSettings))
    setShowAutoResponseModal(false)
    setEditingAutoResponse(null)
    console.log('🤖 Auto response saved:', data)
    alert('Auto response configuration saved!')
  }

  const handleCloseAutoResponseModal = () => {
    setShowAutoResponseModal(false)
    setEditingAutoResponse(null)
  }

  const handleEditOwner = () => {
    setEditModal({
      isOpen: true,
      type: 'owner',
      field: 'owner',
      currentValue: '',
      title: 'Owner',
      inputType: 'form'
    })
  }

  const handleSaveOwner = async (newOwner: any) => {
    try {
      console.log('🔄 Saving owner data:', newOwner)
      
      // Parse name into firstName and lastName
      const nameParts = newOwner.name.split(' ')
      const firstName = nameParts[0] || ''
      const lastName = nameParts.slice(1).join(' ') || ''
      
      // Prepare owner update data (only fields supported by user API)
      const ownerUpdateData = {
        firstName,
        lastName,
        email: newOwner.email,
        phone: newOwner.phone
      }
      
      // Note: country and flag are not stored in user table, they're display-only
      // We'll update the local state to reflect the changes
      
      console.log('📝 Owner update data:', ownerUpdateData)
      
      // Update owner through user API (owner is a user)
      if (!property?.ownerId) {
        alert('Property owner ID not found')
        return
      }
      
      // Get current token
      const token = localStorage.getItem('accessToken')
      if (!token) {
        alert('No authentication token found. Please login again.')
        return
      }
      
      // Make direct API call to update user
      const response = await fetch(`http://5.223.55.121:3001/api/users/${property.ownerId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(ownerUpdateData)
      })
      
      const result = await response.json()
      
      if (result.success && result.data) {
        console.log('✅ Owner updated successfully:', result.data)
        
        // Update local owner state with the new data (including country and flag)
        setOwner(newOwner)
        
        // Save phone, country, and flag to localStorage for persistence
        localStorage.setItem(`owner_phone_${property.ownerId}`, newOwner.phone)
        localStorage.setItem(`owner_country_${property.ownerId}`, newOwner.country)
        localStorage.setItem(`owner_flag_${property.ownerId}`, newOwner.flag)
        
        // Reload property to get updated owner data from API
        const propertyResponse = await propertyService.getProperty(params.id)
        if (propertyResponse.success && propertyResponse.data) {
          setProperty(propertyResponse.data)
          
          // Update owner data from the reloaded property, but keep the country, flag, and phone from the form
          if (propertyResponse.data.owner) {
            setOwner({
              name: `${propertyResponse.data.owner.firstName || ''} ${propertyResponse.data.owner.lastName || ''}`.trim() || 'Unknown Owner',
              flag: newOwner.flag, // Keep the flag from the form
              country: newOwner.country, // Keep the country from the form
              email: propertyResponse.data.owner.email || '',
              phone: newOwner.phone, // Keep the phone from the form (backend doesn't return it)
              status: propertyResponse.data.owner.status || 'active'
            })
          }
        }
        
        console.log('✅ Owner data saved successfully!')
        console.log('🔄 Final owner state:', {
          name: `${propertyResponse.data?.owner?.firstName || ''} ${propertyResponse.data?.owner?.lastName || ''}`.trim(),
          flag: newOwner.flag,
          country: newOwner.country,
          email: propertyResponse.data?.owner?.email,
          phone: propertyResponse.data?.owner?.phone
        })
        alert('Owner data saved successfully!')
      } else {
        console.error('❌ Failed to update owner:', result.error)
        
        // Handle specific error cases
        if (result.error?.statusCode === 403) {
          alert('Access denied. Please check your permissions and try again.')
        } else if (result.error?.statusCode === 401) {
          alert('Authentication failed. Please login again.')
        } else if (result.error?.statusCode === 500) {
          alert('Server error occurred. Please try again or contact support.')
        } else {
          alert('Failed to save owner data: ' + (result.error?.message || 'Unknown error'))
        }
      }
    } catch (error) {
      console.error('💥 Error saving owner:', error)
      alert('An unexpected error occurred while saving owner data')
    }
    
    setEditModal({ ...editModal, isOpen: false })
  }


  const handleEditIncomeDistribution = () => {
    console.log('Edit income distribution for property:', property?.id)
    setIncomeDistributionModal(true)
  }

  const handleSaveIncomeDistribution = async (incomeData: any) => {
    try {
      console.log('Saving income distribution:', incomeData)
      
      if (!property?.id) {
        alert('Property ID not found')
        return
      }

      // Update property state with new income distribution data
      setProperty(prev => prev ? {
        ...prev,
        customIncomeDistribution: incomeData.customIncomeDistribution
      } : null)

      // Save to localStorage for persistence
      if (incomeData.customIncomeDistribution) {
        localStorage.setItem(`income_distribution_${property.id}`, JSON.stringify(incomeData.customIncomeDistribution))
      } else {
        localStorage.removeItem(`income_distribution_${property.id}`)
      }

      // TODO: Save to backend when backend supports this field
      // const response = await propertyService.updateProperty(property.id, {
      //   customIncomeDistribution: incomeData.customIncomeDistribution
      // })

      setIncomeDistributionModal(false)
      console.log('✅ Income distribution updated in state:', incomeData.customIncomeDistribution)
      alert('Income distribution saved successfully!')
    } catch (error) {
      console.error('Error saving income distribution:', error)
      alert('Failed to save income distribution')
    }
  }

  const handleCancelIncomeDistribution = () => {
    setIncomeDistributionModal(false)
  }

  // Function to handle photo upload
  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (files && files.length > 0) {
      // Process all files and collect promises
      const filePromises = Array.from(files).map((file) => {
        return new Promise<string>((resolve, reject) => {
          const reader = new FileReader()
          reader.onload = (e) => {
            if (e.target?.result) {
              const base64String = e.target.result as string
              resolve(base64String)
            } else {
              reject(new Error('FileReader failed'))
            }
          }
          reader.onerror = (error) => {
            reject(error)
          }
          reader.readAsDataURL(file)
        })
      })
      
      // Wait for all files to be processed
      Promise.all(filePromises)
        .then((newPhotos) => {
          setPhotos(prev => {
            const updated = [...prev, ...newPhotos]
            // Save to localStorage
            localStorage.setItem(`photos_${params.id}`, JSON.stringify(updated))
            return updated
          })
        })
        .catch((error) => {
          console.error('Error processing files:', error)
        })
    }
    
    // Clear the input
    event.target.value = ''
  }

  // Function to remove photo
  const handleRemovePhoto = (index: number) => {
    const newPhotos = photos.filter((_, i) => i !== index)
    setPhotos(newPhotos)
    
    // Update localStorage
    localStorage.setItem(`photos_${params.id}`, JSON.stringify(newPhotos))
    
    console.log('🗑️ Photo removed at index:', index)
  }

  // Function to set cover photo
  const handleSetCoverPhoto = (index: number) => {
    if (index === 0) return // Already cover photo
    
    const newPhotos = [...photos]
    const coverPhoto = newPhotos[0]
    newPhotos[0] = newPhotos[index]
    newPhotos[index] = coverPhoto
    
    setPhotos(newPhotos)
    
    // Update localStorage
    localStorage.setItem(`photos_${params.id}`, JSON.stringify(newPhotos))
    
    console.log('📸 Cover photo changed to index:', index)
  }

  // Function to generate time options for dropdown
  const generateTimeOptions = () => {
    const times = []
    for (let hour = 0; hour < 24; hour++) {
      for (let minute = 0; minute < 60; minute += 30) {
        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`
        times.push(timeString)
      }
    }
    return times
  }

  // Function to calculate days difference
  const calculateDaysDifference = (dateString: string) => {
    try {
      // Parse date in format dd.mm.yyyy
      const [day, month, year] = dateString.split('.')
      const inputDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day))
      const today = new Date()
      
      // Reset time to start of day for accurate calculation
      today.setHours(0, 0, 0, 0)
      inputDate.setHours(0, 0, 0, 0)
      
      const diffTime = today.getTime() - inputDate.getTime()
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))
      
      if (diffDays === 0) {
        return 'today'
      } else if (diffDays > 0) {
        return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`
      } else {
        return `${Math.abs(diffDays)} day${Math.abs(diffDays) === 1 ? '' : 's'} from now`
      }
    } catch (error) {
      console.error('Error calculating date difference:', error)
      return 'invalid date'
    }
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-slate-50">
        <TopNavigation />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
            <p className="text-slate-600">Loading property details...</p>
          </div>
        </div>
      </div>
    )
  }

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-slate-50">
        <TopNavigation />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="text-red-500 text-6xl mb-4">⚠️</div>
            <h2 className="text-xl font-semibold text-slate-900 mb-2">Error Loading Property</h2>
            <p className="text-slate-600 mb-4">{error}</p>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    )
  }

  // Property not found
  if (!property) {
    return (
      <div className="min-h-screen bg-slate-50">
        <TopNavigation />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="text-slate-400 text-6xl mb-4">🏠</div>
            <h2 className="text-xl font-semibold text-slate-900 mb-2">Property Not Found</h2>
            <p className="text-slate-600 mb-4">The property you're looking for doesn't exist.</p>
            <button
              onClick={() => window.history.back()}
              className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors"
            >
              Go Back
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Top Navigation */}
      <TopNavigation />
      
      {/* Sticky Header */}
      <div className="sticky top-[3.3rem] z-10 bg-white border border-gray-200 px-4 py-4 shadow-sm">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <button 
              onClick={() => window.history.back()}
              className="p-2 hover:bg-slate-100 rounded-lg transition-colors cursor-pointer"
            >
              <ArrowLeft size={16} />
            </button>
            <h1 className="text-xl font-medium text-slate-900">{property.name}</h1>
          </div>
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2 bg-orange-50 border border-orange-200 px-3 py-2 rounded-lg">
              <span className="text-lg">🏷️</span>
              <span className="text-sm font-medium text-orange-700">AED {property.pricePerNight}/night</span>
            </div>
            <button 
              onClick={() => setAddBookingModal(true)}
              className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
            >
              Add booking
            </button>
          </div>
        </div>
      </div>
    

      {/* Main Content */}
      <div className="px-2 sm:px-3 lg:px-4 pt-[4rem]">
        {/* Two Column Layout */}
        <div className="flex gap-4">
          {/* Left Sidebar - Property Info & Tabs */}
          <div className="w-80 flex-shrink-0">
            {/* Property Photo */}
            <div className="bg-white rounded-xl border border-gray-200 p-4 mb-4">
              <div className="aspect-video rounded-lg mb-3 relative overflow-hidden group">
                {photos.length > 0 ? (
                  <>
                    <img
                      src={photos[0]}
                      alt="Property cover photo"
                      className="w-full h-full object-cover"
                    />
                    <span className="absolute top-2 left-2 bg-orange-500 text-white text-xs px-2 py-1 rounded">
                      Cover Photo
                </span>
                    {/* Add photos button overlay */}
                    <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <button
                        onClick={() => {
                          console.log('🖱️ Add Photos button clicked from cover photo')
                          if (fileInputRef.current) {
                            fileInputRef.current.click()
                          }
                        }}
                        className="bg-white text-gray-700 text-xs px-2 py-1 rounded shadow-md hover:bg-gray-100 transition-colors"
                      >
                        Add photos
                      </button>
          </div>
                  </>
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-gray-200 to-gray-300 flex items-center justify-center">
                    <div className="text-center text-gray-500">
                      <div className="text-4xl mb-2">📸</div>
                      <p className="text-sm mb-2">No photos uploaded</p>
                <button 
                        onClick={() => {
                          console.log('🖱️ Add Photos button clicked from empty state')
                          if (fileInputRef.current) {
                            fileInputRef.current.click()
                          }
                        }}
                        className="text-orange-500 text-sm hover:text-orange-600 transition-colors"
                      >
                        Add photos
                </button>
            </div>
                  </div>
                )}
              </div>
          
              {/* Property Name and Address */}
              <div>
                  <h3 className="text-lg font-medium text-slate-900">{property?.name || 'Property Name'}</h3>
                  <p className="text-sm text-slate-500">{property?.address || 'Property Address'}</p>
            </div>
          </div>
          

        {/* Platform Containers */}
            <div className="grid grid-cols-3 gap-2 mb-4">
          {[
            'AirBnb',
            'Booking', 
            'Property Finder',
            'Dubizzle',
            'Bayut'
          ].map((platform, index) => (
                <div key={index} className="bg-white p-2 rounded-xl border border-gray-200 min-h-[50px] flex items-center justify-center">
              <div className="text-center">
                    <p className="text-xs text-slate-600 font-medium leading-tight">{platform}</p>
              </div>
            </div>
          ))}
        </div>

        {/* Tabs */}
            <div className="bg-white rounded-xl border border-gray-200">
              <div className="p-4">
                <h3 className="text-sm font-medium text-slate-700 mb-3">Property Details</h3>
                <nav className="space-y-1">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                      className={`w-full text-left px-3 py-2 rounded-lg font-medium text-sm transition-colors cursor-pointer ${
                    activeTab === tab.id
                          ? 'bg-orange-50 text-orange-600 border border-orange-200'
                          : 'text-slate-600 hover:bg-slate-50 hover:text-slate-700'
                  }`}
                >
                  {tab.label}
                </button>
              ))}
            </nav>
              </div>
            </div>
          </div>

          {/* Right Content Area */}
          <div className="flex-1 min-w-0">
            <div className="bg-white rounded-xl border border-gray-200">

          <div className="p-4">
            {activeTab === 'overview' && (
              <div className="space-y-6">

                {/* Owner Section */}
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">Owner</h2>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-slate-100 rounded-full flex items-center justify-center">
                        <span className="text-lg font-medium text-slate-600">{owner.name.charAt(0)}</span>
                        </div>
                        <div>
                        <h3 className="text-lg font-medium text-gray-900">{owner.name}</h3>
                          <div className="flex items-center space-x-4 text-sm text-gray-600 mt-1">
                            <div className="flex items-center space-x-1">
                              <span>{owner.flag}</span>
                              <span>{owner.country}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Mail size={14} />
                              <span>{owner.email}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Phone size={14} />
                              <span>{owner.phone}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            <span className="text-green-600 capitalize">{owner.status}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                        <button 
                          onClick={handleEditOwner}
                      className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                        >
                          <Edit size={14} className="inline mr-1" />
                          Change
                        </button>
                  </div>
                </div>

                {/* Income Distribution */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-lg font-semibold text-gray-900">Income Distribution</h2>
                    <div className="flex items-center space-x-2">
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                        property?.customIncomeDistribution 
                          ? 'bg-orange-100 text-orange-800' 
                          : 'bg-green-100 text-green-800'
                      }`}>
                        {property?.customIncomeDistribution ? 'Custom' : 'Standard'}
                      </span>
                      <button 
                        onClick={() => handleEditIncomeDistribution()}
                        className="text-orange-600 hover:text-orange-700 cursor-pointer"
                      >
                        <Edit size={16} />
                      </button>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      {[
                        { label: 'Owner income', value: property?.customIncomeDistribution?.ownerIncome || '70%', key: 'owner_income' },
                        { label: 'Roomy Agency Fee', value: property?.customIncomeDistribution?.agencyFee || '25%', key: 'agency_fee' },
                        { label: 'Referring agent', value: property?.customIncomeDistribution?.referringAgent || '5%', key: 'referring_agent' }
                      ].map((item, index) => (
                        <div key={index} className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm font-medium text-gray-600">{item.label}:</span>
                            {!property?.customIncomeDistribution && (
                              <span className="text-xs text-gray-400">(Standard)</span>
                            )}
                          </div>
                          <div className="flex items-center space-x-3">
                            <span className="text-sm text-gray-900">{item.value}</span>
                      </div>
                    </div>
                      ))}
                    </div>
                    <div className="space-y-4">
                      <div className="bg-slate-50 rounded-lg p-4">
                        <h4 className="text-sm font-medium text-gray-900 mb-2">Profit Formula</h4>
                        <p className="text-sm text-gray-600">
                          {property?.customIncomeDistribution?.ownerIncome || '70%'} Owner / {property?.customIncomeDistribution?.agencyFee || '25%'} Company
                        </p>
                      </div>
                      <div className="bg-slate-50 rounded-lg p-4">
                        <h4 className="text-sm font-medium text-gray-900 mb-2">Total Profit</h4>
                        <p className="text-lg font-medium text-gray-900">$12,500</p>
                      </div>
                      {!property?.customIncomeDistribution && (
                        <div className="bg-blue-50 rounded-lg p-4">
                          <h4 className="text-sm font-medium text-blue-900 mb-1">Using Standard Settings</h4>
                          <p className="text-xs text-blue-700">This property uses the default income distribution from Financial Management settings.</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* General Information */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">General information</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      {[
                        { label: 'Name', value: 'Apartment in Downtown Dubai 1 bedroom' },
                        { label: 'Nickname', value: propertyNickname },
                        { label: 'Status', value: 'Active' },
                        { label: 'Type', value: property.type },
                        { label: 'Location', value: property.city },
                        { label: 'Address', value: property.address },
                        { label: 'Size', value: property.area ? `${property.area} m²` : 'N/A' },
                        { label: 'Beds', value: `${property.bedrooms} bedroom${property.bedrooms !== 1 ? 's' : ''}` },
                        { label: 'Bathrooms', value: `${property.bathrooms} bathroom${property.bathrooms !== 1 ? 's' : ''}` },
                        { label: 'Capacity', value: `${property.capacity} guest${property.capacity !== 1 ? 's' : ''}` },
                        { label: 'Price per Night', value: `AED ${property.pricePerNight}` }
                      ].map((item, index) => (
                        <div key={index} className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm font-medium text-gray-600">{item.label}:</span>
                          </div>
                          <div className="flex items-center space-x-3">
                            <span className="text-sm text-gray-900">{item.value}</span>
                            <button 
                              onClick={() => {
                                const fieldMap: { [key: string]: string } = {
                                  'type': 'type',
                                  'location': 'location', 
                                  'address': 'address',
                                  'size': 'size',
                                  'beds': 'beds',
                                  'bathrooms': 'bathrooms',
                                  'capacity': 'capacity',
                                  'price per night': 'price'
                                }
                                const field = fieldMap[item.label.toLowerCase()] || item.label.toLowerCase()
                                const inputType = ['size', 'beds', 'bathrooms', 'capacity', 'price'].includes(field) ? 'number' : 'text'
                                handleEditField('general', field, item.value, item.label, inputType)
                              }}
                              className="text-orange-600 hover:text-orange-700 cursor-pointer"
                            >
                              <Edit size={14} />
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                    <div className="space-y-4">
                      {[
                        { label: 'Parking Slot', value: '2' },
                        { label: 'Agency Fee', value: '18%' },
                        { label: 'DTCM license expiry', value: '15.12.2024 (45 days left)' },
                        { label: 'Referring agent', value: 'Ahmed Al Mansouri (12%)' },
                        { 
                          label: 'Check-in from', 
                          value: checkInTime,
                          key: 'check_in_time',
                          editable: true,
                          type: 'time'
                        },
                        { 
                          label: 'Check-out to', 
                          value: checkOutTime,
                          key: 'check_out_time',
                          editable: true,
                          type: 'time'
                        },
                        { 
                          label: 'Unit intake date', 
                          value: `${unitIntakeDate} (${calculateDaysDifference(unitIntakeDate)})`,
                          key: 'unit_intake_date',
                          editable: true
                        }
                      ].map((item, index) => (
                        <div key={index} className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm font-medium text-gray-600">{item.label}:</span>
                          </div>
                          <div className="flex items-center space-x-3">
                            <span className="text-sm text-gray-900">{item.value}</span>
                            {item.editable && (
                            <button 
                                onClick={() => handleEditField('general', item.key || item.label.toLowerCase(), item.value, item.label, item.type || 'text')}
                              className="text-orange-600 hover:text-orange-700 cursor-pointer"
                            >
                              <Edit size={14} />
                            </button>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Description */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">Description</h2>
                  <div className="flex items-start justify-between">
                    <div className="flex-1 pr-4">
                      <p className="text-sm text-gray-700 whitespace-pre-wrap leading-relaxed">{property.description || 'No description available'}</p>
                    </div>
                    <button 
                      onClick={() => handleEditField('description', 'description', property.description || '', 'Description', 'textarea')}
                      className="text-orange-600 hover:text-orange-700 cursor-pointer"
                    >
                      <Edit size={16} />
                    </button>
                  </div>
                </div>



                {/* Photos */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">Photos</h2>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {photos.map((photo, index) => (
                      <div key={index} className={`aspect-[4/3] rounded-lg relative group ${
                        index === 0 ? 'ring-2 ring-orange-500' : ''
                        }`}>
                        <img
                          src={photo}
                          alt={`Property photo ${index + 1}`}
                          className="w-full h-full object-cover rounded-lg"
                        />
                        
                        {/* Cover badge */}
                          {index === 0 && (
                          <span className="absolute top-2 left-2 bg-orange-500 text-white text-xs px-2 py-1 rounded">
                              Cover
                            </span>
                          )}
                        
                        {/* Hover overlay with actions */}
                        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-200 rounded-lg flex items-center justify-center opacity-0 group-hover:opacity-100">
                          <div className="flex space-x-2">
                            {index !== 0 && (
                              <button
                                onClick={() => handleSetCoverPhoto(index)}
                                className="bg-white text-gray-700 px-3 py-1 rounded text-xs hover:bg-gray-100 transition-colors"
                                title="Set as cover photo"
                              >
                                Set Cover
                              </button>
                            )}
                            <button
                              onClick={() => handleRemovePhoto(index)}
                              className="bg-red-500 text-white px-3 py-1 rounded text-xs hover:bg-red-600 transition-colors"
                              title="Remove photo"
                            >
                              Remove
                            </button>
                          </div>
                          </div>
                        </div>
                      ))}
                    
                    {/* Add photo button */}
                    <div 
                      className="aspect-[4/3] border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center hover:border-orange-400 hover:bg-orange-50 cursor-pointer transition-colors"
                      onClick={() => {
                        // Trigger file input click using ref
                        if (fileInputRef.current) {
                          fileInputRef.current.click()
                        }
                      }}
                    >
                      <input
                        ref={fileInputRef}
                        type="file"
                        accept="image/*"
                        multiple
                        onChange={handlePhotoUpload}
                        className="hidden"
                        title="Add photos"
                      />
                      <div className="text-center">
                        <Plus size={28} className="text-gray-400 mx-auto mb-2" />
                        <span className="text-sm text-gray-500">Add Photos</span>
                      </div>
                  </div>
                  </div>
                  
                  {photos.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <p>No photos uploaded yet</p>
                      <p className="text-sm">Click the "Add Photos" button to upload images</p>
                    </div>
                  )}
                </div>

                {/* Amenities */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">Amenities</h2>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mb-4">
                    {selectedAmenities.map((amenity, index) => (
                      <div key={index} className="p-3 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors group relative">
                        <span className="text-sm text-gray-700">{amenity}</span>
                        <button
                          onClick={() => {
                            const newAmenities = selectedAmenities.filter((_, i) => i !== index)
                            setSelectedAmenities(newAmenities)
                            localStorage.setItem(`amenities_${params.id}`, JSON.stringify(newAmenities))
                            console.log('🗑️ Amenity removed:', amenity)
                          }}
                          className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700"
                          title="Remove amenity"
                        >
                          <X size={14} />
                        </button>
                      </div>
                    ))}
                  </div>
                  
                  {selectedAmenities.length === 0 && (
                    <div className="text-center py-8 text-gray-500 mb-4">
                      <div className="text-4xl mb-2">🏠</div>
                      <p>No amenities selected</p>
                      <p className="text-sm">Click "Edit list" to add amenities</p>
                    </div>
                  )}
                  
                  <button 
                    onClick={handleEditAmenities}
                    className="text-orange-600 hover:text-orange-700 text-sm cursor-pointer"
                  >
                    <Edit size={14} className="inline mr-1" />
                    Edit list
                  </button>
                </div>



                {/* Rules */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">Rules</h2>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mb-4">
                    {selectedRules.map((rule, index) => (
                      <div key={index} className="p-3 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors group relative">
                        <span className="text-sm text-gray-700">{rule}</span>
                        <button
                          onClick={() => {
                            const newRules = selectedRules.filter((_, i) => i !== index)
                            setSelectedRules(newRules)
                            localStorage.setItem(`rules_${params.id}`, JSON.stringify(newRules))
                            console.log('🗑️ Rule removed:', rule)
                          }}
                          className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700"
                          title="Remove rule"
                        >
                          <X size={14} />
                        </button>
                      </div>
                    ))}
                  </div>
                  
                  {selectedRules.length === 0 && (
                    <div className="text-center py-8 text-gray-500 mb-4">
                      <div className="text-4xl mb-2">📋</div>
                      <p>No rules set</p>
                      <p className="text-sm">Click "Edit list" to add rules</p>
                    </div>
                  )}
                  
                  <button 
                    onClick={handleEditRules}
                    className="text-orange-600 hover:text-orange-700 text-sm cursor-pointer"
                  >
                    <Edit size={14} className="inline mr-1" />
                    Edit list
                  </button>
                </div>

                {/* Utilities */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-lg font-semibold text-gray-900">Utilities</h2>
                    <button 
                      onClick={handleAddUtility}
                      className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                    >
                      <Plus size={14} className="inline mr-1" />
                      Add new
                    </button>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {utilities.map((utility) => (
                      <div key={utility.id} className="bg-slate-50 rounded-lg p-4 border border-slate-200 hover:border-orange-300 transition-colors group">
                        <div className="flex items-start justify-between mb-3">
                          <h3 className="text-sm font-medium text-gray-900">{utility.title}</h3>
                        <button
                            onClick={() => handleRemoveUtility(utility.id)}
                            className="text-gray-400 hover:text-red-600 p-1 cursor-pointer opacity-0 group-hover:opacity-100 transition-opacity"
                            title="Remove utility"
                        >
                          <X size={16} />
                        </button>
                        </div>
                        <p className="text-sm text-gray-600">{utility.description}</p>
                      </div>
                    ))}
                  </div>
                  
                  {utilities.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <div className="text-4xl mb-2">🔧</div>
                      <p>No utilities added yet</p>
                      <p className="text-sm">Click "Add new" to add utilities</p>
                    </div>
                  )}
                </div>
              </div>
            )}

            {activeTab === 'financial' && (
              <div className="space-y-4">
                {isLoadingFinancial && (
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <div className="flex items-center justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mr-3"></div>
                      <span className="text-gray-600">Loading financial data...</span>
                    </div>
                  </div>
                )}
                {/* Date filters */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-lg font-semibold text-gray-900">Financial Overview</h2>
                  <div className="flex space-x-2">
                    {['Custom', 'Last year', 'Last 6 month', 'Last 3 month', 'Last month', 'Last week'].map((range) => (
                      <button
                        key={range}
                          onClick={() => handleDateRangeChange(range.toLowerCase().replace(' ', ''))}
                          className={`px-3 py-1 rounded-lg text-xs font-medium cursor-pointer ${
                          dateRange === range.toLowerCase().replace(' ', '')
                              ? 'bg-orange-500 text-white'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                      >
                        {range}
                      </button>
                    ))}
                  </div>
                </div>

                  {/* Date pickers - only show when Custom is selected */}
                  {dateRange === 'custom' ? (
                    <div className="flex items-center space-x-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">From</label>
                    <input
                      type="date"
                      value={dateFrom}
                      onChange={(e) => setDateFrom(e.target.value)}
                          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">To</label>
                    <input
                      type="date"
                      value={dateTo}
                      onChange={(e) => setDateTo(e.target.value)}
                          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                    />
                  </div>
                </div>
                  ) : (
                    <div className="text-sm text-gray-600">
                      <span className="font-medium">Selected period:</span> {new Date(dateFrom).toLocaleDateString()} - {new Date(dateTo).toLocaleDateString()}
                      </div>
                  )}
                </div>

                {/* Revenue Breakdown */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">Revenue Breakdown</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <div className="flex items-center justify-between py-3 border-b border-gray-100">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm font-medium text-gray-600">Total Revenue:</span>
                      </div>
                        <div className="flex items-center space-x-3">
                          <span className="text-sm font-medium text-gray-900">
                            {financialData ? `AED ${financialData.totalRevenue.toLocaleString()}` : 'AED 0'}
                          </span>
                      </div>
                    </div>
                      <div className="flex items-center justify-between py-3 border-b border-gray-100">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm font-medium text-gray-600">Owner Payout (80%):</span>
                      </div>
                      <div className="flex items-center space-x-3">
                          <span className="text-sm font-medium text-green-600">
                            {financialData ? `AED ${financialData.ownerPayout.toLocaleString()}` : 'AED 0'}
                          </span>
                      </div>
                    </div>
                      <div className="flex items-center justify-between py-3 border-b border-gray-100">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm font-medium text-gray-600">Agency Fee (20%):</span>
                      </div>
                      <div className="flex items-center space-x-3">
                          <span className="text-sm font-medium text-orange-600">
                            {financialData ? `AED ${financialData.agencyFee.toLocaleString()}` : 'AED 0'}
                          </span>
                      </div>
                        </div>
                      </div>
                    <div className="space-y-4">
                      <div className="bg-slate-50 rounded-lg p-4">
                        <h4 className="text-sm font-medium text-gray-900 mb-2">Revenue Distribution</h4>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="text-xs text-gray-600">Owner</span>
                            <span className="text-xs text-gray-600">
                              {financialData && financialData.totalRevenue > 0 
                                ? `${Math.round((financialData.ownerPayout / financialData.totalRevenue) * 100)}%` 
                                : '0%'}
                            </span>
                        </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-green-500 h-2 rounded-full" 
                              style={{ 
                                width: financialData && financialData.totalRevenue > 0 
                                  ? `${(financialData.ownerPayout / financialData.totalRevenue) * 100}%` 
                                  : '0%' 
                              }}
                            ></div>
                      </div>
                          <div className="flex items-center justify-between">
                            <span className="text-xs text-gray-600">Agency</span>
                            <span className="text-xs text-gray-600">
                              {financialData && financialData.totalRevenue > 0 
                                ? `${Math.round((financialData.agencyFee / financialData.totalRevenue) * 100)}%` 
                                : '0%'}
                            </span>
                    </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-orange-500 h-2 rounded-full" 
                              style={{ 
                                width: financialData && financialData.totalRevenue > 0 
                                  ? `${(financialData.agencyFee / financialData.totalRevenue) * 100}%` 
                                  : '0%' 
                              }}
                            ></div>
                  </div>
                      </div>
                        </div>
                      </div>
                  </div>
                </div>

                {/* Expenses Breakdown */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h2 className="text-lg font-semibold text-gray-900 mb-6">Expenses Breakdown</h2>
                  
                  <div className="overflow-hidden">
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-slate-50 border-b border-gray-200">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Category</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Type</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Amount</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Description</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {financialData && financialData.expenses.length > 0 ? (
                            financialData.expenses.map((expense) => (
                              <tr key={expense.id} className="hover:bg-gray-50 transition-colors">
                            <td className="px-6 py-4 whitespace-nowrap">
                                  <span className="text-sm font-medium text-gray-900">{expense.category}</span>
                            </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{expense.type}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                  AED {expense.amount.toLocaleString()}
                            </td>
                                <td className="px-6 py-4 text-sm text-gray-500">{expense.description}</td>
                          </tr>
                            ))
                          ) : (
                            <tr>
                              <td colSpan={4} className="px-6 py-8 text-center text-gray-500">
                                No expenses found for the selected period
                            </td>
                          </tr>
                          )}
                        </tbody>
                      </table>
                      </div>
                  </div>
                </div>

                {/* Last transactions */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-lg font-semibold text-gray-900">Last transactions</h2>
                    <button 
                      onClick={handleNewPayment}
                      className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg text-sm font-medium cursor-pointer flex items-center space-x-2"
                    >
                      <Plus size={16} />
                      <span>New payment</span>
                    </button>
                  </div>
                  <div className="overflow-hidden">
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-slate-50 border-b border-gray-200">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Name</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Date & Time</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Channel</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Method</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">ID</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Amount</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {financialData && financialData.transactions.length > 0 ? (
                            financialData.transactions.map((transaction) => (
                              <tr key={transaction.id} className="hover:bg-gray-50 transition-colors">
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                  {transaction.name}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {new Date(transaction.date).toLocaleDateString()}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {transaction.channel}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {transaction.method}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {transaction.id}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                    transaction.status === 'completed' ? 'bg-green-100 text-green-800' :
                                    transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                    'bg-red-100 text-red-800'
                                  }`}>
                                    {transaction.status}
                                  </span>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                  AED {transaction.amount.toLocaleString()}
                                </td>
                            </tr>
                            ))
                          ) : (
                            <tr>
                              <td colSpan={7} className="px-6 py-8 text-center text-gray-500">
                                No transactions found for the selected period
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>
                    </div>
                  </div>

                {/* Reservations Table */}
                <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                  <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
                    <h3 className="text-lg font-semibold text-gray-900">Reservations</h3>
                    <div className="flex items-center space-x-2">
                    <button 
                      onClick={handleNewReservation}
                      className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg text-sm font-medium cursor-pointer flex items-center space-x-2"
                    >
                      <Plus size={16} />
                      <span>New Reservation</span>
                    </button>
                  </div>
                  </div>
                  {isLoadingReservations && (
                    <div className="flex items-center justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mr-3"></div>
                      <span className="text-gray-600">Loading reservations...</span>
                    </div>
                  )}
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Guest Name
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Date In / Out
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Source
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Nights
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Total Paid
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Status
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {reservations.length > 0 ? (
                          reservations.map((reservation) => (
                          <tr key={reservation.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {reservation.guestName}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {reservation.checkIn} / {reservation.checkOut}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                reservation.source === 'Airbnb' 
                                  ? 'bg-pink-100 text-pink-800'
                                  : reservation.source === 'Booking.com'
                                  ? 'bg-blue-100 text-blue-800'
                                  : 'bg-green-100 text-green-800'
                              }`}>
                                {reservation.source}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {reservation.nights}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              AED {reservation.totalPaid.toLocaleString()}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                reservation.status === 'confirmed' ? 'bg-green-100 text-green-800' :
                                reservation.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                reservation.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                'bg-blue-100 text-blue-800'
                              }`}>
                                {reservation.status}
                              </span>
                            </td>
                          </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan={6} className="px-6 py-8 text-center text-gray-500">
                              No reservations found
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'expenses' && (
              <div className="space-y-6">
                {/* Expenses table */}
                <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                  <div className="px-6 py-4 border-b border-gray-200">
                    <h3 className="text-lg font-semibold text-gray-900">Expenses</h3>
                  </div>
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead className="bg-slate-50 border-b border-gray-200">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">DATE</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">CATEGORY</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">CONTRACTOR</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">AMOUNT</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">DESCRIPTION</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">ACTIONS</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {expenses.length > 0 ? (
                          expenses.map((expense, index) => (
                            <tr key={expense.id} className="hover:bg-gray-50 transition-colors">
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{expense.date}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{expense.category}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{expense.contractor}</td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">AED {expense.amount.toLocaleString()}</td>
                              <td className="px-6 py-4 text-sm text-gray-900">{expense.description}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                              <button 
                                  onClick={() => {
                                    setExpenses(prev => prev.filter((_, i) => i !== index))
                                    console.log('💰 Expense deleted:', expense)
                                  }}
                                className="text-red-600 hover:text-red-800 p-1 hover:bg-red-100 rounded cursor-pointer"
                                title="Delete expense"
                              >
                                <X size={16} />
                              </button>
                            </td>
                          </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan={6} className="px-6 py-8 text-center text-gray-500">
                              No expenses found
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                  <div className="p-4 border-t border-gray-200">
                    <button 
                      onClick={handleAddExpense}
                      className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg text-sm font-medium cursor-pointer flex items-center space-x-2"
                    >
                      <Plus size={16} />
                      <span>Add new</span>
                    </button>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'availability' && (
              <div className="space-y-6">
                {/* Tab Header with Edit Button */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h2 className="text-xl font-semibold text-gray-900">Availability Settings</h2>
                      <p className="text-sm text-gray-600 mt-1">Configure booking windows, advance notice, and stay limits for your property</p>
                    </div>
                    {!isEditingAvailability ? (
                      <button 
                        onClick={handleEditAvailability}
                        className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer flex items-center space-x-2"
                      >
                        <Edit size={16} />
                        <span>Edit Settings</span>
                      </button>
                    ) : (
                      <div className="flex space-x-2">
                        <button 
                          onClick={handleCancelAvailability}
                          className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer flex items-center space-x-2"
                        >
                          <X size={16} />
                          <span>Cancel</span>
                        </button>
                        <button 
                          onClick={handleSaveAvailability}
                          className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer flex items-center space-x-2"
                        >
                          <Check size={16} />
                          <span>Save Changes</span>
                        </button>
                      </div>
                    )}
                  </div>
                </div>

                {/* Two Column Layout */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Booking window */}
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Booking window</h3>
                    <p className="text-sm text-gray-600 mb-4">How far into the future is your property available for booking</p>
                    
                    <div className="relative mb-6">
                      <select 
                        value={availabilitySettings.bookingWindow}
                        onChange={(e) => handleAvailabilityChange('bookingWindow', e.target.value)}
                        disabled={!isEditingAvailability}
                        className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white cursor-pointer ${!isEditingAvailability ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                      >
                        <option value="all-days">All days available (Default)</option>
                        <option value="fixed-days">Fixed days</option>
                        <option value="custom">Custom</option>
                      </select>
                      <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                        <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>

                    {/* Advance Notice */}
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 mb-2">Advance Notice</h4>
                      <p className="text-sm text-gray-600 mb-4">The latest guests can book a reservation ahead of check-in</p>
                      
                      <div className="relative">
                        <select 
                          value={availabilitySettings.advanceNotice}
                          onChange={(e) => handleAvailabilityChange('advanceNotice', e.target.value)}
                          disabled={!isEditingAvailability}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white cursor-pointer ${!isEditingAvailability ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        >
                          <option value="none">None (Default)</option>
                          <option value="same-day">Same day (customize cutoff hours)</option>
                          <option value="1-day">1 day's notice</option>
                          <option value="2-days">2 day's notice</option>
                          <option value="3-days">3 day's notice</option>
                          <option value="7-days">7 day's notice</option>
                        </select>
                        <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                          <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Length of stay limits */}
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <div className="mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 mb-2">Length of stay limits</h3>
                        <p className="text-sm text-gray-600">Set the minimum and maximum length of stay per reservation.</p>
                    </div>

                    <div className="grid grid-cols-1 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Minimum length of stay</label>
                        <input
                          type="number"
                          value={availabilitySettings.minStay}
                          onChange={(e) => handleAvailabilityChange('minStay', parseInt(e.target.value) || 0)}
                          disabled={!isEditingAvailability}
                          className={`w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent ${!isEditingAvailability ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                        <p className="text-xs text-gray-500 mt-1">nights</p>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Maximum length of stay</label>
                        <input
                          type="number"
                          value={availabilitySettings.maxStay}
                          onChange={(e) => handleAvailabilityChange('maxStay', parseInt(e.target.value) || 0)}
                          disabled={!isEditingAvailability}
                          className={`w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent ${!isEditingAvailability ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                        <p className="text-xs text-gray-500 mt-1">nights</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Add/Edit Reply Modal */}
            {showAddReplyModal && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">
                      {editingReply ? 'Edit Reply' : 'Add New Reply'}
                    </h3>
                    <button 
                      onClick={handleCloseReplyModal}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <X size={24} />
                    </button>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Reply Title *
                      </label>
                      <input
                        type="text"
                        value={replyForm.title}
                        onChange={(e) => setReplyForm(prev => ({ ...prev, title: e.target.value }))}
                        placeholder="e.g., Welcome Message, Check-in Instructions"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Category
                      </label>
                      <select
                        value={replyForm.category}
                        onChange={(e) => setReplyForm(prev => ({ ...prev, category: e.target.value as 'property-specific' | 'general' }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      >
                        <option value="property-specific">Property Specific</option>
                        <option value="general">General (All Properties)</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Reply Content *
                      </label>
                      <textarea
                        value={replyForm.content}
                        onChange={(e) => setReplyForm(prev => ({ ...prev, content: e.target.value }))}
                        placeholder="Enter your message template here..."
                        rows={8}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical"
                      />
                    </div>
                  </div>

                  <div className="flex justify-end space-x-3 mt-6">
                    <button 
                      onClick={handleCloseReplyModal}
                      className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
                    >
                      Cancel
                    </button>
                    <button 
                      onClick={handleSaveReply}
                      className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                    >
                      {editingReply ? 'Update Reply' : 'Save Reply'}
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Auto Response Configuration Modal */}
            {showAutoResponseModal && editingAutoResponse && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">
                      Configure Auto Response - {editingAutoResponse.type === 'nonConfirmed' ? 'Non-Confirmed Guests' : 'Confirmed Guests'}
                    </h3>
                    <button 
                      onClick={handleCloseAutoResponseModal}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <X size={24} />
                    </button>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Trigger: {editingAutoResponse.trigger.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                      </label>
                    </div>

                    <div>
                      <label className="flex items-center space-x-2">
                        <input 
                          type="checkbox" 
                          className="w-4 h-4 text-orange-600 rounded focus:ring-orange-500"
                        />
                        <span className="text-sm font-medium text-gray-700">Enable this auto response</span>
                      </label>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Delay (minutes)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="1440"
                        placeholder="0"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Use Saved Reply
                      </label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent">
                        <option value="">Select a saved reply...</option>
                        {savedReplies.map((reply) => (
                          <option key={reply.id} value={reply.id}>
                            {reply.title}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Custom Message
                      </label>
                      <textarea
                        placeholder="Enter your custom message here..."
                        rows={6}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical"
                      />
                    </div>
                  </div>

                  <div className="flex justify-end space-x-3 mt-6">
                    <button 
                      onClick={handleCloseAutoResponseModal}
                      className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
                    >
                      Cancel
                    </button>
                    <button 
                      onClick={() => handleSaveAutoResponse({ enabled: true, delay: 0, message: 'Test message' })}
                      className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                    >
                      Save Configuration
                    </button>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'monthly-calendar' && (
              <div className="space-y-6">
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Monthly Calendar</h3>
                  <p className="text-gray-600 leading-relaxed mb-6">
                    Here you'll find the listing's availability for the entire month. You can create new reservations, add or edit manual blocks,
                    edit minimum nights, and override nightly rates. Changes will be synced automatically with your connected channels.
                  </p>
                  
                  {/* Calendar placeholder */}
                  <div className="flex items-center justify-center py-12">
                    <div className="text-gray-500">Calendar functionality will be implemented here</div>
                      </div>
                </div>
              </div>
            )}

            {activeTab === 'marketing' && (
              <div className="space-y-6">
                {/* Tab Header with Edit Button */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h2 className="text-xl font-semibold text-gray-900">Marketing & Distribution</h2>
                      <p className="text-sm text-gray-600 mt-1">Manage property descriptions and sync with Airbnb & Booking.com</p>
                    </div>
                    {!isEditingMarketing ? (
                      <button 
                        onClick={handleEditMarketing}
                        className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer flex items-center space-x-2"
                      >
                        <Edit size={16} />
                        <span>Edit Marketing</span>
                      </button>
                    ) : (
                      <div className="flex space-x-2">
                        <button 
                          onClick={handleCancelMarketing}
                          className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer flex items-center space-x-2"
                        >
                          <X size={16} />
                          <span>Cancel</span>
                        </button>
                        <button 
                          onClick={handleSaveMarketing}
                          className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer flex items-center space-x-2"
                        >
                          <Check size={16} />
                          <span>Save & Sync</span>
                        </button>
                      </div>
                    )}
                  </div>
                </div>

                {/* Description Section */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Property Description</h3>
                  
                  <div className="space-y-4">
                      <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
                      <input
                        type="text"
                        value={marketingData.title}
                        onChange={(e) => handleMarketingChange('title', e.target.value)}
                        disabled={!isEditingMarketing}
                        className={`w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                      />
                        </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Summary</label>
                      <textarea
                        value={marketingData.summary}
                        onChange={(e) => handleMarketingChange('summary', e.target.value)}
                        disabled={!isEditingMarketing}
                        rows={6}
                        className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                      />
                      </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">The space</label>
                        <textarea
                          value={marketingData.theSpace}
                          onChange={(e) => handleMarketingChange('theSpace', e.target.value)}
                          disabled={!isEditingMarketing}
                          rows={4}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                        </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Guest access</label>
                        <textarea
                          value={marketingData.guestAccess}
                          onChange={(e) => handleMarketingChange('guestAccess', e.target.value)}
                          disabled={!isEditingMarketing}
                          rows={4}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">The neighborhood</label>
                        <textarea
                          value={marketingData.neighborhood}
                          onChange={(e) => handleMarketingChange('neighborhood', e.target.value)}
                          disabled={!isEditingMarketing}
                          rows={4}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                    </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Getting around</label>
                        <textarea
                          value={marketingData.gettingAround}
                          onChange={(e) => handleMarketingChange('gettingAround', e.target.value)}
                          disabled={!isEditingMarketing}
                          rows={4}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                  </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Other things to note</label>
                        <textarea
                          value={marketingData.otherNotes}
                          onChange={(e) => handleMarketingChange('otherNotes', e.target.value)}
                          disabled={!isEditingMarketing}
                          rows={4}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Interaction with guests</label>
                        <textarea
                          value={marketingData.interactionWithGuests}
                          onChange={(e) => handleMarketingChange('interactionWithGuests', e.target.value)}
                          disabled={!isEditingMarketing}
                          rows={4}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical ${!isEditingMarketing ? 'bg-gray-50 cursor-not-allowed' : ''}`}
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Photos Section */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">Marketing Photos</h3>
                    <div className="flex space-x-2">
                      {marketingPhotos.length > 0 && (
                        <button 
                          onClick={handleSyncPhotosFromMain}
                          className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                        >
                          Sync from Main Photos
                        </button>
                      )}
                      <button 
                        onClick={() => {
                          console.log('📸 Marketing photos state:', marketingPhotos)
                          console.log('📸 Main photos state:', photos)
                          console.log('📸 localStorage marketingPhotos:', localStorage.getItem('marketingPhotos'))
                          console.log('📸 localStorage photos:', localStorage.getItem('photos'))
                          alert(`Marketing photos: ${marketingPhotos.length}, Main photos: ${photos.length}\nCheck console for details`)
                        }}
                        className="px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                      >
                        Debug
                      </button>
                      <button 
                        onClick={() => {
                          // Force reload from localStorage
                          const saved = localStorage.getItem('marketingPhotos')
                          if (saved) {
                            const parsedPhotos = JSON.parse(saved)
                            setMarketingPhotos(parsedPhotos)
                            console.log('📸 Force reloaded marketing photos from localStorage:', parsedPhotos)
                          }
                        }}
                        className="px-3 py-1 text-sm bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                      >
                        Force Reload
                      </button>
                      <button 
                        onClick={() => {
                          // Check component state
                          console.log('📸 Component state check:')
                          console.log('- marketingPhotos.length:', marketingPhotos.length)
                          console.log('- marketingPhotos:', marketingPhotos)
                          console.log('- activeTab:', activeTab)
                          console.log('- isEditingMarketing:', isEditingMarketing)
                          console.log('- marketingPhotos.length === 0:', marketingPhotos.length === 0)
                        }}
                        className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                      >
                        Check State
                      </button>
                      <button 
                        onClick={() => {
                          // Force state update
                          const currentPhotos = [...marketingPhotos]
                          setMarketingPhotos([])
                          setTimeout(() => {
                            setMarketingPhotos(currentPhotos)
                            console.log('📸 Force state update completed:', currentPhotos)
                          }, 100)
                        }}
                        className="px-3 py-1 text-sm bg-indigo-500 hover:bg-indigo-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                      >
                        Force Update
                      </button>
                      <button 
                        onClick={() => {
                          // Clear localStorage and reload
                          localStorage.removeItem('marketingPhotos')
                          setMarketingPhotos([])
                          console.log('📸 Cleared localStorage and state')
                          alert('localStorage cleared! Try adding photos again.')
                        }}
                        className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-medium cursor-pointer"
                      >
                        Clear All
                      </button>
                      <button 
                        onClick={() => {
                          // Add test photos
                          const testPhotos = [
                            {
                              id: `test_marketing_${Date.now()}_1`,
                              url: 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=400&h=400&fit=crop',
                              isCover: true
                            },
                            {
                              id: `test_marketing_${Date.now()}_2`,
                              url: 'https://images.unsplash.com/photo-1560448204-603b3fc33ddc?w=400&h=400&fit=crop',
                              isCover: false
                            }
                          ]
                          setMarketingPhotos(testPhotos)
                          
                          // Auto-save to localStorage
                          localStorage.setItem('marketingPhotos', JSON.stringify(testPhotos))
                          console.log('📸 Test marketing photos added and saved:', testPhotos)
                        }}
                        className="px-3 py-1 text-sm bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                      >
                        Add Test Photos
                      </button>
                      {marketingPhotos.length > 0 && (
                        <button 
                          onClick={() => {
                            setMarketingPhotos([])
                            
                            // Auto-save to localStorage
                            localStorage.setItem('marketingPhotos', JSON.stringify([]))
                            console.log('📸 Marketing photos cleared and saved')
                          }}
                          className="px-3 py-1 text-sm bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                        >
                          Clear Photos
                        </button>
                      )}
                    </div>
                  </div>
                  
                  {(() => {
                    console.log('📸 Conditional rendering check:')
                    console.log('- marketingPhotos.length:', marketingPhotos.length)
                    console.log('- marketingPhotos:', marketingPhotos)
                    console.log('- Will show empty state:', marketingPhotos.length === 0)
                    return marketingPhotos.length === 0
                  })() ? (
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-orange-400 hover:bg-orange-50 transition-colors cursor-pointer">
                    <div className="text-gray-400 mb-4">
                      <svg className="mx-auto h-12 w-12" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                        <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth={2} strokeLinecap="round" strokeLinejoin="round" />
                      </svg>
                    </div>
                      <p className="text-sm text-gray-600 mb-2">Upload photos for marketing</p>
                    <p className="text-xs text-gray-500 mb-4">Drag and drop files here, or click to browse</p>
                      <div className="flex justify-center space-x-3">
                        <input
                          type="file"
                          multiple
                          accept="image/*"
                          onChange={handleMarketingPhotoUpload}
                          className="hidden"
                          id="marketing-photo-upload"
                        />
                        <label 
                          htmlFor="marketing-photo-upload"
                          className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors font-medium cursor-pointer"
                        >
                      Upload Photos
                        </label>
                        {photos.length > 0 && (
                          <button 
                            onClick={handleSyncPhotosFromMain}
                            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium cursor-pointer"
                          >
                            Use Main Photos
                    </button>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {/* Upload new photos */}
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">{marketingPhotos.length} photos uploaded</span>
                        <div className="flex space-x-2">
                          <input
                            type="file"
                            multiple
                            accept="image/*"
                            onChange={handleMarketingPhotoUpload}
                            className="hidden"
                            id="marketing-photo-upload-additional"
                          />
                          <label 
                            htmlFor="marketing-photo-upload-additional"
                            className="px-3 py-1 text-sm bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors font-medium cursor-pointer"
                          >
                            Add More
                          </label>
                        </div>
                  </div>
                  
                      {/* Photos grid */}
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                        {marketingPhotos.map((photo) => {
                          console.log('📸 Rendering marketing photo:', photo)
                          return (
                          <div key={photo.id} className="relative group">
                            <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden border border-gray-200 hover:border-orange-300 transition-colors">
                              {photo.url ? (
                                <img 
                                  src={photo.url} 
                                  alt="Marketing photo"
                                  className="w-full h-full object-cover"
                                  onLoad={() => console.log('📸 Image loaded successfully:', photo.url)}
                                  onError={() => console.error('📸 Image failed to load:', photo.url)}
                                />
                              ) : (
                                <div className="w-full h-full flex items-center justify-center text-gray-400">
                                  <span className="text-xs">No Image</span>
                    </div>
                              )}
                              {photo.isCover && (
                                <div className="absolute top-2 left-2 bg-orange-500 text-white text-xs px-2 py-1 rounded-full font-medium">
                                  Cover
                    </div>
                              )}
                              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 flex items-center justify-center">
                                <div className="opacity-0 group-hover:opacity-100 transition-opacity flex space-x-2">
                                  {!photo.isCover && (
                                    <button
                                      onClick={() => handleSetMarketingCoverPhoto(photo.id)}
                                      className="p-2 bg-white rounded-full hover:bg-gray-100 transition-colors"
                                      title="Set as cover photo"
                                    >
                                      <svg className="w-4 h-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                      </svg>
                                    </button>
                                  )}
                                  <button
                                    onClick={() => handleRemoveMarketingPhoto(photo.id)}
                                    className="p-2 bg-red-500 rounded-full hover:bg-red-600 transition-colors"
                                    title="Remove photo"
                                  >
                                    <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                  </button>
                    </div>
                    </div>
                  </div>
                  </div>
                          )
                        })}
                      </div>
                    </div>
                  )}
                </div>

                {/* Channels Section */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Distribution Channels</h3>
                  <p className="text-sm text-gray-600 mb-4">Manage which channels your property is listed on</p>
                  
                  <div className="space-y-3">
                    {channels.map((channel) => (
                      <div key={channel.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                          <div className={`w-8 h-8 ${channel.id === 'airbnb' ? 'bg-red-500' : 'bg-blue-600'} rounded flex items-center justify-center`}>
                            <span className="text-white text-sm font-bold">{channel.id === 'airbnb' ? 'A' : 'B'}</span>
                        </div>
                      <div>
                            <h4 className="font-medium text-gray-900">{channel.name}</h4>
                          <p className="text-sm text-gray-500">Connected</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 ${channel.active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} text-xs rounded-full`}>
                            {channel.active ? 'Active' : 'Inactive'}
                          </span>
                          <button 
                            onClick={() => handleChannelToggle(channel.id)}
                            className={`text-sm cursor-pointer ${channel.active ? 'text-orange-500 hover:text-orange-700' : 'text-gray-500 hover:text-gray-700'}`}
                          >
                            {channel.active ? 'Deactivate' : 'Activate'}
                          </button>
                      </div>
                    </div>
                    ))}
                      </div>
                        </div>
                      </div>
            )}

            {activeTab === 'saved-replies' && (
              <div className="space-y-6">
                {/* Tab Header */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between">
                  <div>
                      <h2 className="text-xl font-semibold text-gray-900">Saved Replies</h2>
                      <p className="text-sm text-gray-600 mt-1">Manage your message templates for quick responses to guests</p>
                        </div>
                    <button 
                      onClick={handleAddNewReply}
                      className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer flex items-center space-x-2"
                    >
                      <Plus size={16} />
                      <span>Add New Reply</span>
                  </button>
                </div>
              </div>

                {/* Replies for this listing only */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-sm font-medium text-gray-500 uppercase tracking-wide">REPLIES SAVED FOR JUST THIS LISTING</h3>
                    <span className="text-xs text-gray-400">
                      {savedReplies.filter(r => r.category === 'property-specific').length} replies
                    </span>
                  </div>
                  
                  <div className="bg-gray-50 rounded-lg p-4 min-h-[80px] border border-gray-200">
                    {savedReplies.filter(r => r.category === 'property-specific').length === 0 ? (
                      <div className="text-center text-gray-500 py-4">
                        <p className="text-sm">No property-specific replies yet</p>
                        <p className="text-xs mt-1">Click "Add New Reply" to create your first template</p>
                  </div>
                    ) : (
                  <div className="flex flex-wrap gap-3">
                        {savedReplies
                          .filter(r => r.category === 'property-specific')
                          .map((reply) => (
                            <div key={reply.id} className="relative group">
                    <button 
                                onClick={() => handleReplyClick(reply.title)}
                      className="px-3 py-1.5 bg-orange-50 text-orange-700 border border-orange-200 rounded-lg hover:bg-orange-100 text-xs font-medium cursor-pointer transition-colors"
                    >
                                {reply.title}
                    </button>
                              <div className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity flex space-x-1">
                    <button 
                                  onClick={() => handleEditReply(reply.id)}
                                  className="p-1 bg-blue-500 rounded-full hover:bg-blue-600 transition-colors"
                                  title="Edit reply"
                    >
                                  <Edit size={12} className="text-white" />
                    </button>
                    <button 
                                  onClick={() => handleDeleteReply(reply.id)}
                                  className="p-1 bg-red-500 rounded-full hover:bg-red-600 transition-colors"
                                  title="Delete reply"
                                >
                                  <X size={12} className="text-white" />
                    </button>
                  </div>
                </div>
                          ))}
                  </div>
                    )}
                </div>
              </div>

                {/* Replies for multiple listings */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-sm font-medium text-gray-500 uppercase tracking-wide">REPLIES SAVED FOR THIS LISTING AND OTHER LISTINGS</h3>
                    <span className="text-xs text-gray-400">
                      {savedReplies.filter(r => r.category === 'general').length} replies
                    </span>
                  </div>

                  <div className="bg-gray-50 rounded-lg p-4 min-h-[80px] border border-gray-200">
                    {savedReplies.filter(r => r.category === 'general').length === 0 ? (
                      <div className="text-center text-gray-500 py-4">
                        <p className="text-sm">No general replies yet</p>
                        <p className="text-xs mt-1">Create general templates that can be used across all properties</p>
                            </div>
                    ) : (
                      <div className="flex flex-wrap gap-3">
                        {savedReplies
                          .filter(r => r.category === 'general')
                          .map((reply) => (
                            <div key={reply.id} className="relative group">
                            <button 
                                onClick={() => handleReplyClick(reply.title)}
                                className="px-3 py-1.5 bg-orange-50 text-orange-700 border border-orange-200 rounded-lg hover:bg-orange-100 text-xs font-medium cursor-pointer transition-colors"
                            >
                                {reply.title}
                      </button>
                              <div className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity flex space-x-1">
                                <button
                                  onClick={() => handleEditReply(reply.id)}
                                  className="p-1 bg-blue-500 rounded-full hover:bg-blue-600 transition-colors"
                                  title="Edit reply"
                                >
                                  <Edit size={12} className="text-white" />
                                </button>
                                <button
                                  onClick={() => handleDeleteReply(reply.id)}
                                  className="p-1 bg-red-500 rounded-full hover:bg-red-600 transition-colors"
                                  title="Delete reply"
                                >
                                  <X size={12} className="text-white" />
                      </button>
                    </div>
                  </div>
                          ))}
                            </div>
                    )}
                            </div>
                          </div>

                {/* Sync Status */}
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span className="text-sm text-gray-700">Synced with Airbnb, Booking.com, and other channels</span>
                          </div>
                  <p className="text-xs text-gray-500 mt-2">All saved replies are automatically synchronized with your connected booking platforms.</p>
                </div>
              </div>
            )}


            {activeTab === 'documents' && (
              <div className="space-y-6">
                {/* Documents Section */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">Property Documents Archive</h3>
                    <button 
                      onClick={handleAddDocument}
                      className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 flex items-center space-x-2 cursor-pointer"
                    >
                      <Plus size={16} />
                      <span>Add Document</span>
                    </button>
                  </div>

                  <div className="space-y-3">
                    {documents.map((document) => (
                      <div key={document.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                        <div className="flex items-center space-x-3">
                          <div className="p-2 bg-orange-100 rounded-lg">
                            <Download size={16} className="text-orange-600" />
                          </div>
                          <div>
                            <h4 className="text-sm font-medium text-gray-900">{document.title}</h4>
                            <div className="flex items-center space-x-3 text-xs text-gray-500 mt-1">
                              <span>{document.fileName}</span>
                              <span>{document.fileSize}</span>
                              <span>{document.type}</span>
                              <span>{new Date(document.uploadDate).toLocaleDateString()}</span>
                            </div>
                            <div className="text-xs text-gray-400 mt-1">
                              Uploaded by {document.uploadedBy} ({document.uploadedByEmail})
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-1">
                          <button className="p-1.5 text-orange-600 hover:bg-orange-100 rounded cursor-pointer" title="Download">
                            <Download size={14} />
                          </button>
                          <button 
                            className="p-1.5 text-red-600 hover:bg-red-100 rounded cursor-pointer"
                            onClick={() => {
                              if (confirm('Are you sure you want to delete this document?')) {
                                setDocuments(prev => prev.filter(doc => doc.id !== document.id))
                              }
                            }}
                            title="Delete"
                          >
                            <X size={14} />
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>

                  {documents.length === 0 && (
                    <div className="text-center py-8">
                      <Download size={32} className="mx-auto text-gray-400 mb-3" />
                      <h3 className="text-sm font-medium text-gray-900 mb-1">No documents uploaded</h3>
                      <p className="text-xs text-gray-500">Upload property documents to keep them organized in one place</p>
                    </div>
                  )}
                </div>
              </div>
            )}

            {activeTab === 'automation' && (
              <div className="space-y-6">
                {/* Tab Header */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h2 className="text-xl font-semibold text-gray-900">Automation</h2>
                      <p className="text-sm text-gray-600 mt-1">Configure automatic responses and actions for guest interactions</p>
                    </div>
                    <div className="flex items-center space-x-3">
                      <label className="flex items-center space-x-2">
                        <input 
                          type="checkbox" 
                          checked={autoResponseSettings.isActive}
                          onChange={handleAutoResponseToggle}
                          className="w-4 h-4 text-orange-600 rounded focus:ring-orange-500" 
                        />
                        <span className="text-sm font-medium text-gray-700">Activate Auto Response</span>
                      </label>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Auto Response Section */}
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-gray-900">Auto Response</h3>
                      <div className="flex items-center space-x-2">
                        <div className={`w-2 h-2 rounded-full ${autoResponseSettings.isActive ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                        <span className="text-xs text-gray-500">
                          {autoResponseSettings.isActive ? 'Active' : 'Inactive'}
                        </span>
                    </div>
                  </div>
                  
                  <div className="mb-3 p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <p className="text-xs text-yellow-800">
                      <strong>Only available for Airbnb reservations</strong>
                    </p>
                  </div>

                  <div className="space-y-4">
                    {/* For non-confirmed guests */}
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 mb-3">For non-confirmed guests</h4>
                      
                      <div className="space-y-2">
                        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-3">
                            <div className={`w-2 h-2 rounded-full ${autoResponseSettings.nonConfirmed.firstMessage.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                          <span className="text-sm font-medium text-gray-700">For the first message</span>
                          </div>
                    <button 
                            onClick={() => handleAutoResponseConfigure('nonConfirmed', 'first-message')}
                            className="px-3 py-1 text-xs bg-orange-50 text-orange-700 border border-orange-200 rounded hover:bg-orange-100 cursor-pointer transition-colors"
                          >
                            {autoResponseSettings.nonConfirmed.firstMessage.enabled ? 'Edit' : 'Configure'}
                          </button>
                        </div>
                        
                        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-3">
                            <div className={`w-2 h-2 rounded-full ${autoResponseSettings.nonConfirmed.subsequentMessage.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                          <span className="text-sm font-medium text-gray-700">For any subsequent message</span>
                          </div>
                          <button 
                            onClick={() => handleAutoResponseConfigure('nonConfirmed', 'subsequent')}
                            className="px-3 py-1 text-xs bg-orange-50 text-orange-700 border border-orange-200 rounded hover:bg-orange-100 cursor-pointer transition-colors"
                          >
                            {autoResponseSettings.nonConfirmed.subsequentMessage.enabled ? 'Edit' : 'Configure'}
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* For confirmed guests */}
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 mb-3">For confirmed guests</h4>
                      
                      <div className="space-y-2">
                        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-3">
                            <div className={`w-2 h-2 rounded-full ${autoResponseSettings.confirmed.beforeCheckin.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                          <span className="text-sm font-medium text-gray-700">Before checking in</span>
                          </div>
                          <button 
                            onClick={() => handleAutoResponseConfigure('confirmed', 'before-checkin')}
                            className="px-3 py-1 text-xs bg-orange-50 text-orange-700 border border-orange-200 rounded hover:bg-orange-100 cursor-pointer transition-colors"
                          >
                            {autoResponseSettings.confirmed.beforeCheckin.enabled ? 'Edit' : 'Configure'}
                          </button>
                        </div>
                        
                        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-3">
                            <div className={`w-2 h-2 rounded-full ${autoResponseSettings.confirmed.checkinDay.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                          <span className="text-sm font-medium text-gray-700">On the day of checkin</span>
                          </div>
                          <button 
                            onClick={() => handleAutoResponseConfigure('confirmed', 'checkin-day')}
                            className="px-3 py-1 text-xs bg-orange-50 text-orange-700 border border-orange-200 rounded hover:bg-orange-100 cursor-pointer transition-colors"
                          >
                            {autoResponseSettings.confirmed.checkinDay.enabled ? 'Edit' : 'Configure'}
                          </button>
                        </div>
                        
                        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-3">
                            <div className={`w-2 h-2 rounded-full ${autoResponseSettings.confirmed.checkoutDay.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                          <span className="text-sm font-medium text-gray-700">On the day of checkout</span>
                          </div>
                          <button 
                            onClick={() => handleAutoResponseConfigure('confirmed', 'checkout-day')}
                            className="px-3 py-1 text-xs bg-orange-50 text-orange-700 border border-orange-200 rounded hover:bg-orange-100 cursor-pointer transition-colors"
                          >
                            {autoResponseSettings.confirmed.checkoutDay.enabled ? 'Edit' : 'Configure'}
                          </button>
                        </div>
                        
                        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-3">
                            <div className={`w-2 h-2 rounded-full ${autoResponseSettings.confirmed.duringStay.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                          <span className="text-sm font-medium text-gray-700">During stay</span>
                          </div>
                          <button 
                            onClick={() => handleAutoResponseConfigure('confirmed', 'during-stay')}
                            className="px-3 py-1 text-xs bg-orange-50 text-orange-700 border border-orange-200 rounded hover:bg-orange-100 cursor-pointer transition-colors"
                          >
                            {autoResponseSettings.confirmed.duringStay.enabled ? 'Edit' : 'Configure'}
                          </button>
                        </div>
                        
                        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-3">
                            <div className={`w-2 h-2 rounded-full ${autoResponseSettings.confirmed.afterCheckout.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                          <span className="text-sm font-medium text-gray-700">After checking out</span>
                          </div>
                          <button 
                            onClick={() => handleAutoResponseConfigure('confirmed', 'after-checkout')}
                            className="px-3 py-1 text-xs bg-orange-50 text-orange-700 border border-orange-200 rounded hover:bg-orange-100 cursor-pointer transition-colors"
                          >
                            {autoResponseSettings.confirmed.afterCheckout.enabled ? 'Edit' : 'Configure'}
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="mt-6 pt-4 border-t border-gray-200">
                    <button className="text-orange-600 hover:text-orange-700 text-sm cursor-pointer">
                      Learn more...
                    </button>
                  </div>

                  <div className="mt-6 flex justify-end">
                    <button className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 cursor-pointer">
                      Save
                    </button>
                  </div>
                </div>

                {/* Auto Reviews Section */}
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">AutoReviews</h3>
                    <div className="flex items-center space-x-3">
                      <label className="flex items-center space-x-2">
                        <input 
                          type="checkbox" 
                          checked={autoReviewsSettings.isActive}
                          onChange={handleAutoReviewsToggle}
                          className="w-4 h-4 text-orange-600 rounded focus:ring-orange-500" 
                        />
                        <span className="text-sm font-medium text-gray-700">Active</span>
                      </label>
                    </div>
                  </div>

                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Delay (in days)</label>
                        <input
                          type="number"
                          value={autoReviewsSettings.delay}
                          onChange={(e) => handleAutoReviewsDelayChange(parseInt(e.target.value))}
                          className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Rating to use</label>
                        <RatingStars
                          rating={autoReviewsSettings.rating}
                          interactive={true}
                          size="md"
                          onRatingChange={handleAutoReviewsRatingChange}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Review templates</label>
                      <textarea
                        value={autoReviewsSettings.template}
                        onChange={(e) => handleAutoReviewsTemplateChange(e.target.value)}
                        rows={4}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical"
                      />
                    </div>
                  </div>

                  <div className="mt-6 pt-4 border-t border-gray-200">
                    <button className="text-orange-600 hover:text-orange-700 text-sm cursor-pointer">
                      Learn more...
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Edit Modal */}
      {editModal.isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Edit {editModal.title}</h3>
              <button 
                onClick={handleCloseEdit}
                className="text-gray-400 hover:text-gray-600"
              >
                <X size={20} />
              </button>
            </div>
            
            {editModal.type === 'amenities' ? (
              <AmenitiesEditModal 
                amenities={amenities}
                selectedAmenities={selectedAmenities}
                onSave={handleSaveAmenities}
                onCancel={handleCloseEdit}
              />
            ) : editModal.type === 'rules' ? (
              <RulesEditModal 
                rules={rules}
                selectedRules={selectedRules}
                onSave={handleSaveRules}
                onCancel={handleCloseEdit}
              />
            ) : editModal.type === 'owner' ? (
              <OwnerEditModal 
                owner={owner}
                countries={countries}
                onSave={handleSaveOwner}
                onCancel={handleCloseEdit}
              />
            ) : (
              <>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {editModal.title}
                  </label>
                  {editModal.inputType === 'textarea' ? (
                    <textarea
                      value={modalInputValue}
                      onChange={(e) => {
                        console.log('📝 Textarea onChange:', e.target.value)
                        setModalInputValue(e.target.value)
                      }}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
                          e.preventDefault()
                          handleSaveEdit()
                        }
                      }}
                      className="w-full min-h-[120px] px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-vertical"
                      autoFocus
                    />
                  ) : editModal.inputType === 'time' ? (
                    <div className="relative">
                      <select
                        value={modalInputValue}
                        onChange={(e) => {
                          console.log('🕐 Time select onChange:', e.target.value)
                          setModalInputValue(e.target.value)
                        }}
                        className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white cursor-pointer"
                        autoFocus
                      >
                        {generateTimeOptions().map((time) => (
                          <option key={time} value={time}>
                            {time}
                          </option>
                        ))}
                      </select>
                      <div className="absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none">
                        <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>
                  ) : (
                  <input
                    type={editModal.inputType}
                    value={modalInputValue}
                    onChange={(e) => {
                      console.log('📝 Input onChange:', e.target.value)
                      setModalInputValue(e.target.value)
                    }}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault()
                        handleSaveEdit()
                      }
                    }}
                      className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                    autoFocus
                  />
                  )}
                </div>
                
                <div className="flex justify-end space-x-3">
                  <button
                    onClick={handleCloseEdit}
                    className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => {
                      console.log('🔘 Save button clicked, modalInputValue:', modalInputValue)
                      handleSaveEdit()
                    }}
                    className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                  >
                    Save
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    

      {/* Add Utility Modal */}
      {addUtilityModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Add New Utility</h3>
              <button 
                onClick={() => setAddUtilityModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X size={20} />
              </button>
            </div>
            
            <AddUtilityModal 
              onSave={handleSaveUtility}
              onCancel={() => setAddUtilityModal(false)}
            />
          </div>
        </div>
      )}

      {/* Add Booking Modal */}
      {addBookingModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-900">Add New Booking</h3>
              <button 
                onClick={() => setAddBookingModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X size={20} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Guest Name</label>
                <input
                  type="text"
                  className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  placeholder="Enter guest name"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Check-in Date</label>
                <input
                  type="date"
                  className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Check-out Date</label>
                <input
                  type="date"
                  className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Total Amount (AED)</label>
                <input
                  type="number"
                  className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  placeholder="Enter total amount"
                />
              </div>
              
              <div className="flex justify-end space-x-3 pt-4">
                <button
                  onClick={() => setAddBookingModal(false)}
                  className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
                >
                  Cancel
                </button>
                <button
                  onClick={() => {
                    // Handle save booking
                    setAddBookingModal(false)
                  }}
                  className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
                >
                  Create Booking
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Reservation Modal */}
      <ReservationModal 
        isOpen={isReservationModalOpen}
        onClose={() => setIsReservationModalOpen(false)}
        selectedDate={currentDate}
        selectedProperty={params.id}
      />

      {/* Saved Replies Modal */}
      {savedRepliesModal.isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{savedRepliesModal.title}</h3>
              <button 
                onClick={() => setSavedRepliesModal({ isOpen: false, type: '', title: '', replyData: null })}
                className="text-gray-400 hover:text-gray-600"
              >
                <X size={20} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Name</label>
                <input
                  type="text"
                  defaultValue={(savedRepliesModal.replyData as any)?.name || ''}
                  className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  placeholder="Enter reply name"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Message Content</label>
                <textarea
                  rows={8}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical"
                  placeholder="Enter your message template here..."
                />
              </div>
              
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setSavedRepliesModal({ isOpen: false, type: '', title: '', replyData: null })}
                className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
              >
                Cancel
              </button>
              <button
                onClick={() => console.log('Save reply:', savedRepliesModal.type)}
                className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Auto Response Modal */}
      {autoResponseModal.isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{autoResponseModal.title}</h3>
              <button 
                onClick={() => setAutoResponseModal({ isOpen: false, type: '', trigger: '', title: '', content: '' })}
                className="text-gray-400 hover:text-gray-600"
              >
                <X size={20} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-sm text-blue-800">
                  <strong>Trigger:</strong> {autoResponseModal.trigger.replace('-', ' ').toUpperCase()}
                </p>
                <p className="text-sm text-blue-600 mt-1">This message will be sent automatically based on the selected trigger.</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Message Template</label>
                <textarea
                  value={autoResponseModal.content}
                  onChange={(e) => setAutoResponseModal(prev => ({ ...prev, content: e.target.value }))}
                  rows={8}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical"
                  placeholder="Enter your auto-response message here..."
                />
              </div>
              
              <div className="text-sm text-gray-600">
                <p><strong>Available variables:</strong></p>
                <p className="mt-1">• {`{guest_name}`} - Guest's name</p>
                <p>• {`{check_in_date}`} - Check-in date</p>
                <p>• {`{check_out_date}`} - Check-out date</p>
                <p>• {`{property_name}`} - Property name</p>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setAutoResponseModal({ isOpen: false, type: '', trigger: '', title: '', content: '' })}
                className="px-4 py-2 text-sm bg-white border border-gray-300 text-slate-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
              >
                Cancel
              </button>
              <button
                onClick={() => console.log('Save auto response:', autoResponseModal)}
                className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Income Distribution Modal */}
      {incomeDistributionModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Income Distribution</h3>
            <p className="text-gray-600 mb-4">Income distribution configuration will be implemented here.</p>
            <div className="flex justify-end space-x-3">
              <button 
                onClick={handleCancelIncomeDistribution}
                className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
              >
                Cancel
              </button>
              <button 
                onClick={() => handleSaveIncomeDistribution({})}
                className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}

    {/* New Payment Modal */}
    {showPaymentModal && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">New Payment</h3>
            <button
              onClick={handleClosePaymentModal}
              className="text-gray-400 hover:text-gray-600"
            >
              <X size={20} />
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Payment Name *
              </label>
              <input
                type="text"
                placeholder="Enter payment name"
                value={paymentForm.name}
                onChange={(e) => setPaymentForm(prev => ({ ...prev, name: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Amount (AED) *
              </label>
              <input
                type="number"
                placeholder="0.00"
                value={paymentForm.amount}
                onChange={(e) => setPaymentForm(prev => ({ ...prev, amount: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Payment Method *
              </label>
              <select 
                value={paymentForm.method}
                onChange={(e) => setPaymentForm(prev => ({ ...prev, method: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                <option value="">Select payment method</option>
                <option value="Credit Card">Credit Card</option>
                <option value="Bank Transfer">Bank Transfer</option>
                <option value="Cash">Cash</option>
                <option value="PayPal">PayPal</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Channel *
              </label>
              <select 
                value={paymentForm.channel}
                onChange={(e) => setPaymentForm(prev => ({ ...prev, channel: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                <option value="">Select channel</option>
                <option value="Airbnb">Airbnb</option>
                <option value="Booking.com">Booking.com</option>
                <option value="Direct">Direct</option>
                <option value="Other">Other</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                placeholder="Enter payment description"
                rows={3}
                value={paymentForm.description}
                onChange={(e) => setPaymentForm(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={handleClosePaymentModal}
              className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
            >
              Cancel
            </button>
            <button
              onClick={handleCreatePayment}
              className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
            >
              Create Payment
            </button>
          </div>
        </div>
      </div>
    )}

    {/* New Reservation Modal */}
    {showReservationModal && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-lg mx-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">New Reservation</h3>
            <button
              onClick={handleCloseReservationModal}
              className="text-gray-400 hover:text-gray-600"
            >
              <X size={20} />
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Guest Name *
              </label>
              <input
                type="text"
                placeholder="Enter guest name"
                value={reservationForm.guestName}
                onChange={(e) => setReservationForm(prev => ({ ...prev, guestName: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Guest Email
              </label>
              <input
                type="email"
                placeholder="Enter guest email"
                value={reservationForm.guestEmail}
                onChange={(e) => setReservationForm(prev => ({ ...prev, guestEmail: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Guest Phone
              </label>
              <input
                type="tel"
                placeholder="Enter guest phone"
                value={reservationForm.guestPhone}
                onChange={(e) => setReservationForm(prev => ({ ...prev, guestPhone: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Check-in Date *
                </label>
                <input
                  type="date"
                  value={reservationForm.checkIn}
                  onChange={(e) => setReservationForm(prev => ({ ...prev, checkIn: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Check-out Date *
                </label>
                <input
                  type="date"
                  value={reservationForm.checkOut}
                  onChange={(e) => setReservationForm(prev => ({ ...prev, checkOut: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Source *
              </label>
              <select 
                value={reservationForm.source}
                onChange={(e) => setReservationForm(prev => ({ ...prev, source: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                <option value="">Select source</option>
                <option value="Airbnb">Airbnb</option>
                <option value="Booking.com">Booking.com</option>
                <option value="Direct">Direct</option>
                <option value="Other">Other</option>
              </select>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nightly Rate (AED)
                </label>
                <input
                  type="number"
                  placeholder="0.00"
                  value={reservationForm.nightAmount}
                  onChange={(e) => setReservationForm(prev => ({ ...prev, nightAmount: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Total Amount (AED)
                </label>
                <input
                  type="number"
                  placeholder="0.00"
                  value={reservationForm.totalAmount}
                  onChange={(e) => setReservationForm(prev => ({ ...prev, totalAmount: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select 
                value={reservationForm.status}
                onChange={(e) => setReservationForm(prev => ({ ...prev, status: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                <option value="">Select status</option>
                <option value="confirmed">Confirmed</option>
                <option value="pending">Pending</option>
                <option value="cancelled">Cancelled</option>
                <option value="completed">Completed</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Special Requests
              </label>
              <textarea
                placeholder="Enter any special requests or notes"
                rows={3}
                value={reservationForm.specialRequests}
                onChange={(e) => setReservationForm(prev => ({ ...prev, specialRequests: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={handleCloseReservationModal}
              className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
            >
              Cancel
            </button>
            <button
              onClick={handleCreateReservation}
              className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
            >
              Create Reservation
            </button>
          </div>
        </div>
      </div>
    )}

    {/* Add Expense Modal */}
    {showExpenseModal && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">Add New Expense</h3>
            <button
              onClick={handleCloseExpenseModal}
              className="text-gray-400 hover:text-gray-600"
            >
              <X size={20} />
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Date *
              </label>
              <input
                type="date"
                value={expenseForm.date}
                onChange={(e) => setExpenseForm(prev => ({ ...prev, date: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Category *
              </label>
              <select 
                value={expenseForm.category}
                onChange={(e) => setExpenseForm(prev => ({ ...prev, category: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                <option value="">Select category</option>
                <option value="Maintenance">Maintenance</option>
                <option value="Cleaning">Cleaning</option>
                <option value="Utilities">Utilities</option>
                <option value="Repairs">Repairs</option>
                <option value="Supplies">Supplies</option>
                <option value="Other">Other</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Contractor *
              </label>
              <input
                type="text"
                placeholder="Enter contractor name"
                value={expenseForm.contractor}
                onChange={(e) => setExpenseForm(prev => ({ ...prev, contractor: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Amount (AED) *
              </label>
              <input
                type="number"
                placeholder="0.00"
                value={expenseForm.amount}
                onChange={(e) => setExpenseForm(prev => ({ ...prev, amount: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                placeholder="Enter expense description"
                rows={3}
                value={expenseForm.description}
                onChange={(e) => setExpenseForm(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={handleCloseExpenseModal}
              className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
            >
              Cancel
            </button>
            <button
              onClick={handleCreateExpense}
              className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
            >
              Add Expense
            </button>
          </div>
        </div>
      </div>
    )}

    {/* Add Document Modal */}
    {showDocumentModal && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">Add New Document</h3>
            <button
              onClick={handleCloseDocumentModal}
              className="text-gray-400 hover:text-gray-600"
            >
              <X size={20} />
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Document Title *
              </label>
              <input
                type="text"
                placeholder="Enter document title"
                value={documentForm.title}
                onChange={(e) => setDocumentForm(prev => ({ ...prev, title: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Document Type *
              </label>
              <select 
                value={documentForm.type}
                onChange={(e) => setDocumentForm(prev => ({ ...prev, type: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                <option value="">Select document type</option>
                <option value="Contract">Contract</option>
                <option value="Insurance">Insurance</option>
                <option value="Photos">Photos</option>
                <option value="Maintenance">Maintenance</option>
                <option value="Legal">Legal</option>
                <option value="Financial">Financial</option>
                <option value="Other">Other</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                placeholder="Enter document description"
                rows={3}
                value={documentForm.description}
                onChange={(e) => setDocumentForm(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Attach File</label>
              <div className="relative">
                <input
                  type="file"
                  className="w-full h-10 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent cursor-pointer file:mr-4 file:py-1 file:px-3 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100"
                  accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.xlsx,.xls"
                />
              </div>
            </div>
          </div>
          
          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={handleCloseDocumentModal}
              className="px-4 py-2 text-sm bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium cursor-pointer"
            >
              Cancel
            </button>
            <button
              onClick={handleCreateDocument}
              className="px-4 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors font-medium cursor-pointer"
            >
              Add Document
            </button>
          </div>
        </div>
      </div>
    )}
    </div>
  
}
